{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Leaf? \u00b6 Leaf is a powerful, fun, lightweight web application for querying clinical data. Leaf helps query clinical databases of nearly any data model for cohort estimation and data extraction, and seamlessly integrates with existing enterprise authentication systems to unleash the potential of translational biomedical research. Why Leaf? \u00b6 Flexible: Clinical databases come in all shapes and sizes. Leaf can work with nearly any clinical data model, including the OMOP Common Data Model , i2b2 and SHRINE , or other proprietary or non-standard data models. Add Leaf as a sidecar to an existing data warehouse. User Friendly: Leaf is designed to be simple, intuitive, and fast. Searching for diagnosis or procedural codes, labs, or whatever you point Leaf to is easy. Scalable: Leaf excels on databases large and small, and has been successfully deployed on terabyte-size clinical databases with millions of patients and decades of data. Secure: Security of protected health information is critical to any healthcare organization. Leaf implements current best security practices to make clinical data both accessible and safe. Open: Curious how Leaf works, how you can help, or how you can use Leaf to help researchers at your CTSA ? Let us know! Leaf is an open-source project and we love collaborating with other institutions and hearing feedback. Getting Started \u00b6 Taking Leaf for a test drive Installation How Leaf can help accomplish research Learn more about Leaf's role in clinical informatics and background in the manuscript Leaf: an open-source, model-agnostic, data-driven web application for cohort discovery and translational biomedical research","title":"What is Leaf?"},{"location":"#what-is-leaf","text":"Leaf is a powerful, fun, lightweight web application for querying clinical data. Leaf helps query clinical databases of nearly any data model for cohort estimation and data extraction, and seamlessly integrates with existing enterprise authentication systems to unleash the potential of translational biomedical research.","title":"What is Leaf?"},{"location":"#why-leaf","text":"Flexible: Clinical databases come in all shapes and sizes. Leaf can work with nearly any clinical data model, including the OMOP Common Data Model , i2b2 and SHRINE , or other proprietary or non-standard data models. Add Leaf as a sidecar to an existing data warehouse. User Friendly: Leaf is designed to be simple, intuitive, and fast. Searching for diagnosis or procedural codes, labs, or whatever you point Leaf to is easy. Scalable: Leaf excels on databases large and small, and has been successfully deployed on terabyte-size clinical databases with millions of patients and decades of data. Secure: Security of protected health information is critical to any healthcare organization. Leaf implements current best security practices to make clinical data both accessible and safe. Open: Curious how Leaf works, how you can help, or how you can use Leaf to help researchers at your CTSA ? Let us know! Leaf is an open-source project and we love collaborating with other institutions and hearing feedback.","title":"Why Leaf?"},{"location":"#getting-started","text":"Taking Leaf for a test drive Installation How Leaf can help accomplish research Learn more about Leaf's role in clinical informatics and background in the manuscript Leaf: an open-source, model-agnostic, data-driven web application for cohort discovery and translational biomedical research","title":"Getting Started"},{"location":"contributing/","text":"Contributing to Leaf \u00b6 Want to help contribute to Leaf? Awesome! There are many ways you can help be part of the Leaf developer community. Please take a minute to review this document to make your contribution easy and effective for everyone involved. Posting an Issue \u00b6 Please utilize GitHub issue tracker to post\u202fbugs, feature enhancements, and to submit pull requests. Keep the following in mind when creating an issue - Please: Do not use the issue tracker for support. We will post documentation if a support issue is found to be common with our partners. Do not\u202fpost opinions or otherwise unstructured/irrelevant information. Keep the focus on the discussion at hand. Use relevant pre-determined labels; \u2018feature request\u2019 or \u2018bug\u2019? Keep the issue title clear and concise. Bug reports \u00b6 A bug is a\u202fdemonstrable problem\u202fwith a list of steps that were taken to get said bug. Also, the cause has to be limited strictly by the code in the repository. Posting bug issues are extremely helpful for the greater good and we HIGHLY encourage you to post directly to the Leaf repo. Guidelines for bug reports: Please check if the issue has already been reported. Please check if the issue has been addressed\u202f\u2014 perform a \u2018test\u2019 and try reproducing your bug using the latest development branch in the repository. Isolate the problem\u202f A good rule of thumb - a bug report shouldn't leave folks hanging, and they shouldn\u2019t have to chase you down to get more info. With that said, please try to be as detailed as possible and start each report by answering the following questions: What is your environment? What steps will reproduce the issue? What did you expect the outcome to be/ what should have happened? What did happen? Features and enhancements \u00b6 Of course, feature requests are welcome, but please take into account if your request fits in with the greater good of the community. More than likely you will not be the only one that would benefit from your request, but still try to think critically about it. Please provide as much detail and context as possible. Pull requests \u00b6 Good pull requests - improvements, new features - are a fantastic help. They should remain focused in scope and avoid containing unrelated commits. Please ask us first\u202fbefore embarking on any significant pull request, we really want big feature enhancements, etc. to be a collaborative effort. Please reach out to us! Please adhere to the coding conventions used throughout a project (indentation, accurate comments, etc.) and any other requirements (such as test coverage). Follow this process if you'd like your work considered for inclusion in the project: Fork\u202fthe project, clone your fork, and configure the remotes: # Clone your fork of the repo into the current directory git clone https://github.com/<your-username>/leaf # Navigate to the newly cloned directory cd leaf # Assign the original repo to a remote called \"upstream\" git remote add upstream https://github.com/uwrit/leaf If you cloned a while ago, get the latest changes from upstream: git checkout <dev-branch> git pull upstream <dev-branch> Create a new topic branch (off the main project development branch) to contain your feature, change, or fix: git checkout -b <topic-branch-name> Commit your changes in logical chunks. Please adhere to these\u202fgit commit message guidelines\u202for your code is unlikely be merged into the main project. Use Git's\u202finteractive rebase\u202ffeature to tidy up your commits before making them public. Locally merge (or rebase) the upstream development branch into your topic branch: git pull [ --rebase ] upstream <dev-branch> Push your topic branch up to your fork: git push origin <topic-branch-name> Open a Pull Request\u202fwith a clear title and description. IMPORTANT: By submitting a patch, you agree to allow us to license your work under the same license is that used by the project.","title":"Contributing to Leaf"},{"location":"contributing/#contributing-to-leaf","text":"Want to help contribute to Leaf? Awesome! There are many ways you can help be part of the Leaf developer community. Please take a minute to review this document to make your contribution easy and effective for everyone involved.","title":"Contributing to Leaf"},{"location":"contributing/#posting-an-issue","text":"Please utilize GitHub issue tracker to post\u202fbugs, feature enhancements, and to submit pull requests. Keep the following in mind when creating an issue - Please: Do not use the issue tracker for support. We will post documentation if a support issue is found to be common with our partners. Do not\u202fpost opinions or otherwise unstructured/irrelevant information. Keep the focus on the discussion at hand. Use relevant pre-determined labels; \u2018feature request\u2019 or \u2018bug\u2019? Keep the issue title clear and concise.","title":"Posting an Issue"},{"location":"contributing/#bug-reports","text":"A bug is a\u202fdemonstrable problem\u202fwith a list of steps that were taken to get said bug. Also, the cause has to be limited strictly by the code in the repository. Posting bug issues are extremely helpful for the greater good and we HIGHLY encourage you to post directly to the Leaf repo. Guidelines for bug reports: Please check if the issue has already been reported. Please check if the issue has been addressed\u202f\u2014 perform a \u2018test\u2019 and try reproducing your bug using the latest development branch in the repository. Isolate the problem\u202f A good rule of thumb - a bug report shouldn't leave folks hanging, and they shouldn\u2019t have to chase you down to get more info. With that said, please try to be as detailed as possible and start each report by answering the following questions: What is your environment? What steps will reproduce the issue? What did you expect the outcome to be/ what should have happened? What did happen?","title":"Bug reports"},{"location":"contributing/#features-and-enhancements","text":"Of course, feature requests are welcome, but please take into account if your request fits in with the greater good of the community. More than likely you will not be the only one that would benefit from your request, but still try to think critically about it. Please provide as much detail and context as possible.","title":"Features and enhancements"},{"location":"contributing/#pull-requests","text":"Good pull requests - improvements, new features - are a fantastic help. They should remain focused in scope and avoid containing unrelated commits. Please ask us first\u202fbefore embarking on any significant pull request, we really want big feature enhancements, etc. to be a collaborative effort. Please reach out to us! Please adhere to the coding conventions used throughout a project (indentation, accurate comments, etc.) and any other requirements (such as test coverage). Follow this process if you'd like your work considered for inclusion in the project: Fork\u202fthe project, clone your fork, and configure the remotes: # Clone your fork of the repo into the current directory git clone https://github.com/<your-username>/leaf # Navigate to the newly cloned directory cd leaf # Assign the original repo to a remote called \"upstream\" git remote add upstream https://github.com/uwrit/leaf If you cloned a while ago, get the latest changes from upstream: git checkout <dev-branch> git pull upstream <dev-branch> Create a new topic branch (off the main project development branch) to contain your feature, change, or fix: git checkout -b <topic-branch-name> Commit your changes in logical chunks. Please adhere to these\u202fgit commit message guidelines\u202for your code is unlikely be merged into the main project. Use Git's\u202finteractive rebase\u202ffeature to tidy up your commits before making them public. Locally merge (or rebase) the upstream development branch into your topic branch: git pull [ --rebase ] upstream <dev-branch> Push your topic branch up to your fork: git push origin <topic-branch-name> Open a Pull Request\u202fwith a clear title and description. IMPORTANT: By submitting a patch, you agree to allow us to license your work under the same license is that used by the project.","title":"Pull requests"},{"location":"leaf_help_research/","text":"How can Leaf help biomedical research? \u00b6 Clinical databases are often the starting point for gathering data for nearly any kind biomedical research, whether in assessing feasibility of clinical trials , prep to research, retrospective research , or data science and machine learning . It's also often the case that academic medical centers have many more brilliant researchers, clinicians, and trainees eager to test hypotheses and use data than there are informaticians able to extract it. Leaf is a simple drag-and-drop web application that queries clinical databases, so users can focus on accomplishing research, not waiting for data. As an example, imagine a young researcher interested in studying low platelet counts in children diagnosed with congenital anomalies . She's interested in learning about patients at her institution, but may not have the funding to pay to extract the data, or the time to wait in line to request it. With just Leaf and her laptop, it's easy for her to find the criteria: Make a query: And find her answer: Results \u00b6 While Leaf can't solve every clinical data problem, it has enabled and helped hundreds of research and quality improvement projects at our institution, all while reducing the overall maintenance and support burden for our informatics teams. Here are a few projects that used Leaf: Frequency of Allopurinol Dose Reduction in Hospitalized Patients With Gout Flares The National COVID Cohort Collaborative (N3C): Rationale, design, infrastructure, and deployment Risk Factors for Indeterminate Outcome on Interferon Gamma Release Assay in Non-US-Born Persons Screened for Latent Tuberculosis Infection PC040. Disease-Based Observational Cohort Study of Patients With Thoracoabdominal Aortic Aneurysm Left ventricular hypertrophy is a possible biomarker for early mortality after type B aortic dissection Safety of Expectant Management for Adhesive Small Bowel Obstruction: A Systematic Review IP003. Aortic Dissection-Related Mortality in Washington State Remains Unchanged From 1996 to 2016 Trends in Washington State Aortic-Related Deaths Over a 21-Year Period, 1996-2016 Washington State abdominal aortic aneurysm-related mortality shows a steady decline between 1996 and 2016 Disease-Based Observation Cohort Study of Patients with Thoracoabdominal Aortic Aneurysm Demographic, clinical and immunologic correlates among a cohort of 50 cocaine users demonstrating anti-neutrophil cytoplasmic antibodies (currently in review) The Interferon Gamma Release Assay Is a Novel Predictor of Disease Activity in Systemic Lupus Erythematosus A Pharmacist Managed Titration of urate-lowering therapy to streamline gout management","title":"How can Leaf help biomedical research?"},{"location":"leaf_help_research/#how-can-leaf-help-biomedical-research","text":"Clinical databases are often the starting point for gathering data for nearly any kind biomedical research, whether in assessing feasibility of clinical trials , prep to research, retrospective research , or data science and machine learning . It's also often the case that academic medical centers have many more brilliant researchers, clinicians, and trainees eager to test hypotheses and use data than there are informaticians able to extract it. Leaf is a simple drag-and-drop web application that queries clinical databases, so users can focus on accomplishing research, not waiting for data. As an example, imagine a young researcher interested in studying low platelet counts in children diagnosed with congenital anomalies . She's interested in learning about patients at her institution, but may not have the funding to pay to extract the data, or the time to wait in line to request it. With just Leaf and her laptop, it's easy for her to find the criteria: Make a query: And find her answer:","title":"How can Leaf help biomedical research?"},{"location":"leaf_help_research/#results","text":"While Leaf can't solve every clinical data problem, it has enabled and helped hundreds of research and quality improvement projects at our institution, all while reducing the overall maintenance and support burden for our informatics teams. Here are a few projects that used Leaf: Frequency of Allopurinol Dose Reduction in Hospitalized Patients With Gout Flares The National COVID Cohort Collaborative (N3C): Rationale, design, infrastructure, and deployment Risk Factors for Indeterminate Outcome on Interferon Gamma Release Assay in Non-US-Born Persons Screened for Latent Tuberculosis Infection PC040. Disease-Based Observational Cohort Study of Patients With Thoracoabdominal Aortic Aneurysm Left ventricular hypertrophy is a possible biomarker for early mortality after type B aortic dissection Safety of Expectant Management for Adhesive Small Bowel Obstruction: A Systematic Review IP003. Aortic Dissection-Related Mortality in Washington State Remains Unchanged From 1996 to 2016 Trends in Washington State Aortic-Related Deaths Over a 21-Year Period, 1996-2016 Washington State abdominal aortic aneurysm-related mortality shows a steady decline between 1996 and 2016 Disease-Based Observation Cohort Study of Patients with Thoracoabdominal Aortic Aneurysm Demographic, clinical and immunologic correlates among a cohort of 50 cocaine users demonstrating anti-neutrophil cytoplasmic antibodies (currently in review) The Interferon Gamma Release Assay Is a Novel Predictor of Disease Activity in Systemic Lupus Erythematosus A Pharmacist Managed Titration of urate-lowering therapy to streamline gout management","title":"Results"},{"location":"about/","text":"A Brief History \u00b6 Leaf was created by Nic Dobbins , PhD, Assistant Professor of biomedical informatics & data science at Johns Hopkins University, and formerly the Principal Solutions Architect at UW Medicine Research IT. Leaf began as a simple experiment to recreate the power of cohort discovery tools like i2b2 , but with the ability to query any database structure, and with a friendly, intuitive user interface. Since then, Leaf has grown into an institutionally-supported research tool integral to biomedical research at the University of Washington, and was released to the public domain as open-source software in spring 2019. Team Members \u00b6 Nic Dobbins maintains Leaf. Leaf was co-developed by Cliff Spital , now at UW Web Services. Sean Mooney former Chief Research Information Officer of UW Medicine and Professor of Biomedical Informatics & Medical Education, was Leaf's faculty champion. At UW, Leaf has been a successful cohort discovery tool with hundreds of active users. We believe Leaf is a strong component to an ongoing culture change in research computing. Leaf Governance Committee \u00b6 The multi-institutional Leaf Governance Committee was created in 2019 to foster networking and collaboration across CTSA hubs. The committees aim is to support growth, to steer enhancements and oversee governance of the Leaf user community. The committee members are top in the Research Informatics field from institutions across the nation. Please learn more about each member by visiting here . Have questions for the committee? Please ask us here !","title":"A Brief History"},{"location":"about/#a-brief-history","text":"Leaf was created by Nic Dobbins , PhD, Assistant Professor of biomedical informatics & data science at Johns Hopkins University, and formerly the Principal Solutions Architect at UW Medicine Research IT. Leaf began as a simple experiment to recreate the power of cohort discovery tools like i2b2 , but with the ability to query any database structure, and with a friendly, intuitive user interface. Since then, Leaf has grown into an institutionally-supported research tool integral to biomedical research at the University of Washington, and was released to the public domain as open-source software in spring 2019.","title":"A Brief History"},{"location":"about/#team-members","text":"Nic Dobbins maintains Leaf. Leaf was co-developed by Cliff Spital , now at UW Web Services. Sean Mooney former Chief Research Information Officer of UW Medicine and Professor of Biomedical Informatics & Medical Education, was Leaf's faculty champion. At UW, Leaf has been a successful cohort discovery tool with hundreds of active users. We believe Leaf is a strong component to an ongoing culture change in research computing.","title":"Team Members"},{"location":"about/#leaf-governance-committee","text":"The multi-institutional Leaf Governance Committee was created in 2019 to foster networking and collaboration across CTSA hubs. The committees aim is to support growth, to steer enhancements and oversee governance of the Leaf user community. The committee members are top in the Research Informatics field from institutions across the nation. Please learn more about each member by visiting here . Have questions for the committee? Please ask us here !","title":"Leaf Governance Committee"},{"location":"about/sponsor/","text":"Leaf Sponsors \u00b6 Without the support of CD2H or ITHS, Leaf wouldn\u2019t be possible. If you would like to learn more about our sponsors or believe your institution would like to collaborate with us, please click on the logos above or contact us here .","title":"Leaf Sponsors"},{"location":"about/sponsor/#leaf-sponsors","text":"Without the support of CD2H or ITHS, Leaf wouldn\u2019t be possible. If you would like to learn more about our sponsors or believe your institution would like to collaborate with us, please click on the logos above or contact us here .","title":"Leaf Sponsors"},{"location":"administration/","text":"Administration \u00b6 Leaf is designed to present clinical data in a visually intuitive way for users, and do so on virtually any clinical data model. In this section, we'll walk through: Concepts, the building blocks of Leaf cohort queries See also the Concepts Reference Guide Datasets, for viewing row-level cohort data See also the Datasets Reference Guide Networking Multiple Leaf Instances","title":"Administration"},{"location":"administration/#administration","text":"Leaf is designed to present clinical data in a visually intuitive way for users, and do so on virtually any clinical data model. In this section, we'll walk through: Concepts, the building blocks of Leaf cohort queries See also the Concepts Reference Guide Datasets, for viewing row-level cohort data See also the Datasets Reference Guide Networking Multiple Leaf Instances","title":"Administration"},{"location":"administration/concept_reference/","text":"Concept Reference \u00b6 Name, Subtext, and Full Text \u00b6 Textual descriptions of Concepts are critical to making information about them clear to users. Leaf Concepts have three primary fields for describing information about them: ( Concept fields referenced here are stored in the app.Concept database table unless otherwise noted ) Name - The primary text shown for the Concept within the tree. Try to keep this brief, leveraging parent Concepts above it to provide context and provenance where possible. This is stored in the database as UiDisplayName . Subtext - The smaller, lighter text shown to the right of the Name . This is optional, and we have found this works well for adding information such as how far back data in the Concept go. This is stored in the database as UiDisplaySubtext . Full Text - The text shown when a user drags the Concept over to create a query. We suggest making this a bit more verbose than Name , and approximating a sentence. This is stored in the database as UiDisplayText . Tooltips \u00b6 Tooltips are a bit of a misnomer, as they are actually shown when the user clicks Learn More while hovering over a Concept, rather than just by hovering alone. Tooltip text can be used to provide detailed information to users about the data the Concept represents, but may be too long to put in the Name or Subtext . The text can be seen in the above example in the Sources: Epic Clarity... information. This is stored in the database as UiDisplayTooltip . Patient Count \u00b6 The Patient Count field shows a small green person indicating the number of unique patients the user would expect to find if she were to run a query with this Concept only and with no date restrictions, etc. An example stored procedure to automatically loop through the app.Concept table and calculate this for each Concept is here https://github.com/uwrit/leaf/blob/master/src/db/obj/app.sp_CalculatePatientCounts.StoredProcedure.sql , though please note that this will likely be scripted into an API or CLI-based procedure in the future. This can be used by: EXEC app . sp_CalculatePatientCounts @ PersonIdField = 'person_id' -- PersonId field for this Leaf instance , @ TargetDataBaseName = 'ClinDb' -- Clinical database to query for this Leaf instance , @ TotalAllowedRuntimeInMinutes = 180 , -- Total minutes to allow to entire process to run , @ PerRootConceptAllowedRuntimeInMinutes -- Total minutes to allow a given Root Concept -- and children to run, , @ SpecificRootConcept = NULL -- Optional, specify a Root ConceptId to only -- recalculate counts for part of the tree This is stored in the database as UiDisplayPatientCount . Numeric Filters \u00b6 Use numeric filters to allow users to query based on a numeric value in your database. Create a new Concept and set Configuration -> Is Numeric to true . Set the Name and Full Text fields in General Display as you normally would. Fill in the Numeric default text , which is shown after the Name if the user has not filtered the Concept by any numeric value. Optionally, set the Units of measurement , such as years , kg , etc. Under SQL , set the Numeric Field or expression to the numeric column or expression that you'd like to query. Adding Dropdowns \u00b6 Dropdowns (also known as Concept specializations ) allow users to optionally specify additional logic about a Concept to include in a query. For example, imagine we have a dbo.diagnosis table that looks like this: person_id encounter_id diag_date coding_sys diag_code source type A 123 2009-01-01 ICD10 E11.2 billing primary B 456 2005-08-10 ICD10 T02.5 radiology secondary B 789 2011-06-22 ICD10 A15.5 charges primary We would probably create a Concept tree with a root Diagnoses Concept using the ICD10 hierarchy to allow users to run queries to find patients with certain diagnosis codes, such as type 2 diabetes mellitus. Problem 1 \u00b6 What if users wanted to specify that the diagnosis must come from a specific source, such as billing or radiology ? One approach to solve this would be to create child Concepts under every diagnosis Concept, with each child representing a diagnosis from a particular source: This works to a certain extent, though with every additional diagnosis source, we've doubled the number of diagnosis Concepts. Given that there are roughly 68,000 ICD-10 diagnosis codes as of this writing (not including their parent Concepts which represent ranges of codes), adding child Concepts for just the three example sources above, billing , radiology , and charges will add over 200,000 Concepts to our tree. Just as importantly, this solution may not necessarily be intuitive for users. Problem 2 \u00b6 What if we then wanted to also allow users to specify whether the diagnosis was primary or secondary ? We could simply add these as additional child Concepts, though users wouldn't be able to find patients who had this as the primary diagnosis and from billing . Alternatively, we could create primary and secondary child Concepts under every billing , radiology , and charges Concept: Yikes. This creates a Cartesian product of all diagnosis sources and primary/secondary types for every diagnosis Concept . This is likely to be both confusing for users and wasteful in visual space (in the UI) and database storage. Dropdowns to the Rescue \u00b6 Dropdowns allow users to make the Concept logic more granular if they choose to, and do so in a visually intuitive way. Creating Dropdowns \u00b6 Go to the Admin tab and click on any Concept. Under SQL , click Table, View, or Subquery -> Manage SQL Sets . Under the SQL Set you'd like to add a dropdown to, click +Add New Dropdown in the lower-left. Under Default Text , add the text that should be shown if the user hasn't selected a dropdown option. For each option you'd like to add, click +Add Dropdown Option and enter the Text that should be shown, as well as the SQL WHERE clause that should be appended to the Concept SQL if the user selects the option. Click Save at the top. Because dropdowns are tied to SQL Sets , every Concept that uses that SQL Set is able to enable the dropdown as well, allowing dropdowns to be easily reused across many Concepts. Enabling Dropdowns for a Concept \u00b6 After creating the dropdowns, in the Admin screen click the Concept you'd like to enable dropdowns for. Under Configuration , make sure Allow Dropdowns is set to true . Under Dropdowns , click each dropdown you'd like to enable. Enabled dropdowns will turn green and say \"enabled!\". If you don't see any dropdowns available, under SQL make sure the Concept is using the same SQL Set as the dropdowns Click Save at the top. Users will now see the dropdown options when they drag over the Concept. Restricting Access \u00b6 Certain Concepts may represent sensitive data which you need to restrict access to, such as financial data. To restrict access to certain users or groups: In the Admin screen, create a new Concept or click an existing Concept to edit. Scroll down to Access Restrictions and click +Add New Restriction . Select whether you'd like to give a specific User access or a Group . Enter the User or Group name, making sure to include the Leaf Issuer after the user name. Note that: All child and descendent Concepts beneath the restricted Concept inherit the restriction. If there are multiple restrictions, users need to meet only one of them in order to access the Concept. Admins can always see all Concepts, whether restricted or not. Universal IDs \u00b6 Universal IDs allow users to query multiple Leaf instances in a federated fashion (see Networking Multiple Leaf instances to learn how this works). Federated queries work by mapping the requesting user's local Concepts to the federated node's Concepts by UniversalID . UniversalIDs are defined using the URN Syntax . If you are only planning to query Concepts locally at your institution, you don't need to worry about setting UniversalIDs Mapping UniversalIds at Query Execution \u00b6 Assuming multiple Leaf instances have exchanged certificates, user queries can be federated if: Every Concept involved in the user's query has a UniversalId , and All federated Leaf instances have Concepts that match the UniversalIds used in the query. Because UniversalIds themselves are data-model agnostic and are simply a pointer to an arbitrary Concept, this functionality works even if federated Leaf instances use different data models. See https://www.youtube.com/watch?v=ZuKKC7B8mHI for a working demonstration Naming Conventions \u00b6 A Concept representing Outpatient encounters could be defined with the UniversalId : urn:leaf:concept:encounter:type=outpatient Or a Concept representing diagnosis codes for hypertension in pregnancy in ICD-10 could be: urn:leaf:concept:diagnosis:coding=icd10+code=O13.9 Note that these are simply examples, and you are free to define UniversalIds as you'd like. Perhaps the most important point though is to be sure that the UniversalId naming conventions for your Leaf instance and any other Leaf instances match exactly. You can find UniversalIds in the Admin panel under Identifiers -> UniversalId . You don't need to preface UniversalIds with \"urn:leaf:concept:\" yourself, as Leaf will handle that for you. Univeral IDs in dropdowns \u00b6 Note that dropdown options also use UniversalIds using the naming convention \"urn:leaf:specialization:\". If you are federating queries across multiple instances, make sure dropdowns similarly have UniversalIds defined . Concepts without Universal IDs \u00b6 There are inevitably scenarios where although you are federating your queries with other institutions, you still want to expose certain Concepts to your users that are unique to your local database and not expected to be found elsewhere. Good news: That's okay! Leaf expects that not all clinical databases will be identical, and you shouldn't need to hide Concepts from your users simply because other institutions don't have the same data. If a user uses one or more Concepts that are \"local only\" and don't have UniversalIds , Leaf will let them know which institutions weren't able to run the query. Creating Concepts by SQL Scripts \u00b6 Certain Concepts are inherantly hierarchical or voluminous enough that it makes more sense to programmatically add them, such as diagnosis or procedure codes. Head over to the Leaf Scripts repo at https://github.com/uwrit/leaf-scripts to see examples of how to do this.","title":"Concept Reference"},{"location":"administration/concept_reference/#concept-reference","text":"","title":"Concept Reference"},{"location":"administration/concept_reference/#name-subtext-and-full-text","text":"Textual descriptions of Concepts are critical to making information about them clear to users. Leaf Concepts have three primary fields for describing information about them: ( Concept fields referenced here are stored in the app.Concept database table unless otherwise noted ) Name - The primary text shown for the Concept within the tree. Try to keep this brief, leveraging parent Concepts above it to provide context and provenance where possible. This is stored in the database as UiDisplayName . Subtext - The smaller, lighter text shown to the right of the Name . This is optional, and we have found this works well for adding information such as how far back data in the Concept go. This is stored in the database as UiDisplaySubtext . Full Text - The text shown when a user drags the Concept over to create a query. We suggest making this a bit more verbose than Name , and approximating a sentence. This is stored in the database as UiDisplayText .","title":"Name, Subtext, and Full Text"},{"location":"administration/concept_reference/#tooltips","text":"Tooltips are a bit of a misnomer, as they are actually shown when the user clicks Learn More while hovering over a Concept, rather than just by hovering alone. Tooltip text can be used to provide detailed information to users about the data the Concept represents, but may be too long to put in the Name or Subtext . The text can be seen in the above example in the Sources: Epic Clarity... information. This is stored in the database as UiDisplayTooltip .","title":"Tooltips"},{"location":"administration/concept_reference/#patient-count","text":"The Patient Count field shows a small green person indicating the number of unique patients the user would expect to find if she were to run a query with this Concept only and with no date restrictions, etc. An example stored procedure to automatically loop through the app.Concept table and calculate this for each Concept is here https://github.com/uwrit/leaf/blob/master/src/db/obj/app.sp_CalculatePatientCounts.StoredProcedure.sql , though please note that this will likely be scripted into an API or CLI-based procedure in the future. This can be used by: EXEC app . sp_CalculatePatientCounts @ PersonIdField = 'person_id' -- PersonId field for this Leaf instance , @ TargetDataBaseName = 'ClinDb' -- Clinical database to query for this Leaf instance , @ TotalAllowedRuntimeInMinutes = 180 , -- Total minutes to allow to entire process to run , @ PerRootConceptAllowedRuntimeInMinutes -- Total minutes to allow a given Root Concept -- and children to run, , @ SpecificRootConcept = NULL -- Optional, specify a Root ConceptId to only -- recalculate counts for part of the tree This is stored in the database as UiDisplayPatientCount .","title":"Patient Count"},{"location":"administration/concept_reference/#numeric-filters","text":"Use numeric filters to allow users to query based on a numeric value in your database. Create a new Concept and set Configuration -> Is Numeric to true . Set the Name and Full Text fields in General Display as you normally would. Fill in the Numeric default text , which is shown after the Name if the user has not filtered the Concept by any numeric value. Optionally, set the Units of measurement , such as years , kg , etc. Under SQL , set the Numeric Field or expression to the numeric column or expression that you'd like to query.","title":"Numeric Filters"},{"location":"administration/concept_reference/#adding-dropdowns","text":"Dropdowns (also known as Concept specializations ) allow users to optionally specify additional logic about a Concept to include in a query. For example, imagine we have a dbo.diagnosis table that looks like this: person_id encounter_id diag_date coding_sys diag_code source type A 123 2009-01-01 ICD10 E11.2 billing primary B 456 2005-08-10 ICD10 T02.5 radiology secondary B 789 2011-06-22 ICD10 A15.5 charges primary We would probably create a Concept tree with a root Diagnoses Concept using the ICD10 hierarchy to allow users to run queries to find patients with certain diagnosis codes, such as type 2 diabetes mellitus.","title":"Adding Dropdowns"},{"location":"administration/concept_reference/#problem-1","text":"What if users wanted to specify that the diagnosis must come from a specific source, such as billing or radiology ? One approach to solve this would be to create child Concepts under every diagnosis Concept, with each child representing a diagnosis from a particular source: This works to a certain extent, though with every additional diagnosis source, we've doubled the number of diagnosis Concepts. Given that there are roughly 68,000 ICD-10 diagnosis codes as of this writing (not including their parent Concepts which represent ranges of codes), adding child Concepts for just the three example sources above, billing , radiology , and charges will add over 200,000 Concepts to our tree. Just as importantly, this solution may not necessarily be intuitive for users.","title":"Problem 1"},{"location":"administration/concept_reference/#problem-2","text":"What if we then wanted to also allow users to specify whether the diagnosis was primary or secondary ? We could simply add these as additional child Concepts, though users wouldn't be able to find patients who had this as the primary diagnosis and from billing . Alternatively, we could create primary and secondary child Concepts under every billing , radiology , and charges Concept: Yikes. This creates a Cartesian product of all diagnosis sources and primary/secondary types for every diagnosis Concept . This is likely to be both confusing for users and wasteful in visual space (in the UI) and database storage.","title":"Problem 2"},{"location":"administration/concept_reference/#dropdowns-to-the-rescue","text":"Dropdowns allow users to make the Concept logic more granular if they choose to, and do so in a visually intuitive way.","title":"Dropdowns to the Rescue"},{"location":"administration/concept_reference/#creating-dropdowns","text":"Go to the Admin tab and click on any Concept. Under SQL , click Table, View, or Subquery -> Manage SQL Sets . Under the SQL Set you'd like to add a dropdown to, click +Add New Dropdown in the lower-left. Under Default Text , add the text that should be shown if the user hasn't selected a dropdown option. For each option you'd like to add, click +Add Dropdown Option and enter the Text that should be shown, as well as the SQL WHERE clause that should be appended to the Concept SQL if the user selects the option. Click Save at the top. Because dropdowns are tied to SQL Sets , every Concept that uses that SQL Set is able to enable the dropdown as well, allowing dropdowns to be easily reused across many Concepts.","title":"Creating Dropdowns"},{"location":"administration/concept_reference/#enabling-dropdowns-for-a-concept","text":"After creating the dropdowns, in the Admin screen click the Concept you'd like to enable dropdowns for. Under Configuration , make sure Allow Dropdowns is set to true . Under Dropdowns , click each dropdown you'd like to enable. Enabled dropdowns will turn green and say \"enabled!\". If you don't see any dropdowns available, under SQL make sure the Concept is using the same SQL Set as the dropdowns Click Save at the top. Users will now see the dropdown options when they drag over the Concept.","title":"Enabling Dropdowns for a Concept"},{"location":"administration/concept_reference/#restricting-access","text":"Certain Concepts may represent sensitive data which you need to restrict access to, such as financial data. To restrict access to certain users or groups: In the Admin screen, create a new Concept or click an existing Concept to edit. Scroll down to Access Restrictions and click +Add New Restriction . Select whether you'd like to give a specific User access or a Group . Enter the User or Group name, making sure to include the Leaf Issuer after the user name. Note that: All child and descendent Concepts beneath the restricted Concept inherit the restriction. If there are multiple restrictions, users need to meet only one of them in order to access the Concept. Admins can always see all Concepts, whether restricted or not.","title":"Restricting Access"},{"location":"administration/concept_reference/#universal-ids","text":"Universal IDs allow users to query multiple Leaf instances in a federated fashion (see Networking Multiple Leaf instances to learn how this works). Federated queries work by mapping the requesting user's local Concepts to the federated node's Concepts by UniversalID . UniversalIDs are defined using the URN Syntax . If you are only planning to query Concepts locally at your institution, you don't need to worry about setting UniversalIDs","title":"Universal IDs"},{"location":"administration/concept_reference/#mapping-universalids-at-query-execution","text":"Assuming multiple Leaf instances have exchanged certificates, user queries can be federated if: Every Concept involved in the user's query has a UniversalId , and All federated Leaf instances have Concepts that match the UniversalIds used in the query. Because UniversalIds themselves are data-model agnostic and are simply a pointer to an arbitrary Concept, this functionality works even if federated Leaf instances use different data models. See https://www.youtube.com/watch?v=ZuKKC7B8mHI for a working demonstration","title":"Mapping UniversalIds at Query Execution"},{"location":"administration/concept_reference/#naming-conventions","text":"A Concept representing Outpatient encounters could be defined with the UniversalId : urn:leaf:concept:encounter:type=outpatient Or a Concept representing diagnosis codes for hypertension in pregnancy in ICD-10 could be: urn:leaf:concept:diagnosis:coding=icd10+code=O13.9 Note that these are simply examples, and you are free to define UniversalIds as you'd like. Perhaps the most important point though is to be sure that the UniversalId naming conventions for your Leaf instance and any other Leaf instances match exactly. You can find UniversalIds in the Admin panel under Identifiers -> UniversalId . You don't need to preface UniversalIds with \"urn:leaf:concept:\" yourself, as Leaf will handle that for you.","title":"Naming Conventions"},{"location":"administration/concept_reference/#univeral-ids-in-dropdowns","text":"Note that dropdown options also use UniversalIds using the naming convention \"urn:leaf:specialization:\". If you are federating queries across multiple instances, make sure dropdowns similarly have UniversalIds defined .","title":"Univeral IDs in dropdowns"},{"location":"administration/concept_reference/#concepts-without-universal-ids","text":"There are inevitably scenarios where although you are federating your queries with other institutions, you still want to expose certain Concepts to your users that are unique to your local database and not expected to be found elsewhere. Good news: That's okay! Leaf expects that not all clinical databases will be identical, and you shouldn't need to hide Concepts from your users simply because other institutions don't have the same data. If a user uses one or more Concepts that are \"local only\" and don't have UniversalIds , Leaf will let them know which institutions weren't able to run the query.","title":"Concepts without Universal IDs"},{"location":"administration/concept_reference/#creating-concepts-by-sql-scripts","text":"Certain Concepts are inherantly hierarchical or voluminous enough that it makes more sense to programmatically add them, such as diagnosis or procedure codes. Head over to the Leaf Scripts repo at https://github.com/uwrit/leaf-scripts to see examples of how to do this.","title":"Creating Concepts by SQL Scripts"},{"location":"administration/concepts/","text":"The Building Blocks of Leaf: Concepts \u00b6 Leaf is a SQL writing and execution engine. While it is designed to be fun and intuitive for users, ultimately Leaf's most important job is to reliably and flexibly construct SQL queries using a few simple but powerful configuration rules. Let's start with an example. We'll use an OMOP v5 database for this example, though these steps can be applied to any particular data model. We'll focus on using the person and visit_occurrence tables via views in our OMOP database. The goals are: Configure the Leaf SQL compiler. Create Leaf SQL Sets for the v_person and v_visit_occurrence views. Create basic demographics and encounter Concepts which query our clinical database. Configuring the SQL compiler \u00b6 Every Leaf instance assumes that there is a single, consistent field that represents patient identifiers. In OMOP databases this is the person_id field, which can be found on nearly any table with patient data. Likewise, Leaf assumes that longitudinal tables in the database will have a consistent field representing encounter identifiers. In OMOP this is the visit_occurrence_id field. Before starting, let's create two SQL views called v_person and v_visit_occurrence to make the person and visit_occurrence tables simpler to query. This example is specific to OMOP but the approach works for other models as well. Note that pointing Leaf at views is completely optional and demonstrated here for convenience and illustrative purposes. Our v_person view is defined as: CREATE VIEW dbo . v_person AS SELECT p . person_id , p . birth_datetime , gender = c_gender . concept_code , race = c_race . concept_name , ethnicity = c_ethnicity . concept_name , location_state = loc . state FROM dbo . person AS p LEFT JOIN dbo . concept AS c_gender ON p . gender_concept_id = c_gender . concept_id LEFT JOIN dbo . concept AS c_race ON p . race_concept_id = c_race . concept_id LEFT JOIN dbo . concept AS c_ethnicity ON p . ethnicity_concept_id = c_ethnicity . concept_id LEFT JOIN dbo . location AS loc ON p . location_id = loc . location_id person_id birth_datetime gender race ethnicity location_state A 1990-1-1 F Black or African American Not Hispanic or Latino NY B 1945-2-2 M Asian or Pacific Islander Not Hispanic or Latino OR The v_visit_occurrence view is defined as: CREATE VIEW dbo . v_visit_occurrence AS SELECT o . person_id , o . visit_occurrence_id , o . visit_start_date , o . visit_end_date , o . care_site_id , visit_type_code = c_visit . concept_code FROM dbo . visit_occurrence AS o LEFT JOIN dbo . concept AS c_visit ON o . visit_concept_id = c_visit . concept_id person_id visit_occurrence_id visit_start_date visit_end_date care_site_id visit_type_code A 123 2011-01-01 2011-01-01 site1 OP A 456 2015-05-28 2015-06-07 site1 IP B 789 2014-09-01 2014-09-01 site2 ED Pretty straightforward so far. After creating the views in the database, let's start by configuring Leaf's SQL compiler, which is stored in your compiled API under /leafapi/api/appsettings.json : Let's break it down: Alias acts as a indicator to Leaf to insert an alias in a SQL statement wherever this character(s) is found (more on that in a bit). We'll set this to @ for simplicity and readability, and because it is commonly used in many Leaf configurations. FieldPersonId is the name of the SQL field that appears in all tables or views we'd like to query and represents unique identifiers for patients. The field person_id contains identifiers for patients and appears in all tables which link to a patient, so we'll choose that. FieldEncounterId is the name of the field that represents visit identifiers, so we'll use visit_occurrence_id . Great - we've now provided the most important information to help Leaf understand the basic structure of our clinical database. Note that these values are expected to be consistent and configured only once. Also, if you change them, make sure you restart the Leaf API in order for the changes to take effect. Next, we'll move on to creating Concepts, the building blocks of Leaf queries. Creating SQL Sets \u00b6 We want to allow users to query Concepts using our two new views, v_person and v_visit_occurrence . To do so, let's create a Leaf SQL Set for each. Open up the Leaf client in your web browser. Click Admin -> Concepts on the left sidebar. If you don't see the Admin tab, make sure you have configured your admin group correctly Click Start by creating a Concept SQL Set . SQL Sets are the SQL tables, views, or subqueries that are the foundation of Concepts and provide their FROM clauses. You should see a single white box near the top. Under SQL FROM , enter dbo.v_person . Next, create another SQL Set . Click + Create New SQL Set and fill in dbo.v_visit_occurrence under SQL FROM . Also, check the Has Encounters box. This indicates that Leaf should expect to find an Encounter identifier and date fields on this table. Under Date Field , fill in @.visit_start_date , which you'll recall is the first date field on the v_visit_occurrence view. Don't forget to prepend the alias placeholder @. before the field name. Click Save at the top. Now we are ready to make a few Concepts that use our v_person and v_visit_occurrence views. Creating Concepts \u00b6 We've successfully created SQL Sets for our views, so we can now create Concepts that users can interact with. Our next goal will be to create a basic Concept tree with the following structure: Demographics \u251c\u2500\u2500 Gender \u2502 \u251c\u2500\u2500 Female \u2502 \u251c\u2500\u2500 Male Encounters \u251c\u2500\u2500 Inpatient \u251c\u2500\u2500 Outpatient Go to Admin -> Concepts , then click +Create New Concept . Demographics \u00b6 Under Name , fill in \"Demographics\". This will be the text that users see in the Concept tree. Go down to Full Text and enter \"Have demographics\". Users will see this text if dragged over to create a query. Why is Full Text different than Name ? The intent here is to make the query as descriptive as possible in something approximating an English sentence. Lastly, under the SQL section make sure the Table, View, or Subquery box shows dbo.v_person and the WHERE Clause field is empty. Click Save at the top. As you may have noticed, this Concept is intended to simply serve as a hierachical container for Concepts under it related to Demographics. By itself it will likely not be very useful to users, and if they were to drag it over the query would be something simple like SELECT person_id FROM dbo.v_person , in other words, all patients in the table. Next let's create the Gender Concept, which will appear under Demographics . Click +Create New Concept at the top. Gender \u00b6 Under Name , fill in \"Gender\", and under Full Text , fill in \"Identify with a gender\". We want this Concept to appear beneath Demographics , so drag the new Concept into it in order set Demographics as the parent Concept. Finally, as this Concept represents data about patient gender, users presumably would expect that patients without this data should be excluded. Under SQL -> WHERE Clause enter @.gender IS NOT NULL . Click Save . Repeat the process for the final two demographic Concepts, Female and Male , with the following data: Female General Display Name : \"Female\" Full text : \"Identify as female\" SQL Table, View, or Subquery : \"dbo.v_person\" WHERE Clause : \"@.gender = 'F'\" Male General Display Name : \"Male\" Full text : \"Identify as male\" SQL Table, View, or Subquery : \"dbo.v_person\" WHERE Clause : \"@.gender = 'M'\" In reality people don't necessarily identify with gender binaries of female or male, and clinical databases will often reflect this. Female and male here are used simply for demonstrative purposes Road test \u00b6 Before proceeding to create our Encounters Concepts, let's take a moment to confirm our Demographics Concepts are working as expected by running a quick query to see how many female patients are in our database. Click the Find Patients tab in the upper-left and drag Female over to the first panel. Click Run Query . If you see a count of patients (assuming your database has female patients), great! You can even click (i) -> show detail -> SQL to see the query Leaf created using the new Concept. Success! If your query didn't work (you'll get a modal window notifying you there was an error), check the Leaf logs to see if there were any syntax or other errors in the query Encounters \u00b6 Now that you're hopefully getting the hang of creating Concepts, let's finish by creating Encounters Concepts so users can query information by encounter types. Remember that the structure should look like this: Encounters \u251c\u2500\u2500 Inpatient \u251c\u2500\u2500 Outpatient The field-level information for each Concept is (making sure to nest Inpatient and Outpatient under Encounters ): Encounters General Display Name : \"Encounters\" Full text : \"Had an encounter\" SQL Table, View, or Subquery : \"dbo.v_visit_occurrence\" WHERE Clause : Inpatient General Display Name : \"Inpatient\" Full text : \"Were admitted as an inpatient\" SQL Table, View, or Subquery : \"dbo.v_visit_occurrence\" WHERE Clause : \"@.visit_type_code = 'IP'\" Outpatient General Display Name : \"Outpatient\" Full text : \"Had an outpatient visit\" SQL Table, View, or Subquery : \"dbo.v_visit_occurrence\" WHERE Clause : \"@.visit_type_code = 'OP'\" And that's it! Making Concepts Searchable \u00b6 So you've been able to make Concepts that users can query - great! Over time you'll likely find that your Concept tree will grow as you find new use cases and data sources, and may become cumbersome for users to manually traverse. Leaf's Concept search is a powerful feature which will automatically parse and tokenize the text in your Concepts. This allows users to search for Concepts of interest to them in any word order. To enable this feature, run the app.sp_UpdateSearchIndexTables stored procedure. Leaf search works by using a relatively simple inverted index and forward index search engine in pure SQL. In SQL Server: EXEC app . sp_UpdateSearchIndexTables Warning Be sure to run this stored procedure after any edits or additions to your Concept tree to ensure that users can search the latest text for your Concepts Final thoughts \u00b6 If you were able to successfully make the Concepts in this tutorial, congratulations! Hopefully this was helpful and intuitive enough for you to get started making your clinical database accessible and intuitive for your users as well. Concepts can be extremely flexible and we've only scratched the surface of their functionality. If you'd like to learn more or have questions, head over to the Concept Reference page or jump to a section below: Name, Subtext, and Full Text Tooltips Patient Count Numeric Filters Adding Dropdowns Restricting Access Universal IDs Creating Concepts by SQL Scripts As you were creating Concepts for your database, you may have found yourself thinking that it requires a change in perspective in how you as a developer would query a clinical database versus how best to represent Concepts to users. We've found that this is just as much an art as a science, and it's ultimately an iterative process, so don't worry about getting it perfect the first time.","title":"The Building Blocks of Leaf: Concepts"},{"location":"administration/concepts/#the-building-blocks-of-leaf-concepts","text":"Leaf is a SQL writing and execution engine. While it is designed to be fun and intuitive for users, ultimately Leaf's most important job is to reliably and flexibly construct SQL queries using a few simple but powerful configuration rules. Let's start with an example. We'll use an OMOP v5 database for this example, though these steps can be applied to any particular data model. We'll focus on using the person and visit_occurrence tables via views in our OMOP database. The goals are: Configure the Leaf SQL compiler. Create Leaf SQL Sets for the v_person and v_visit_occurrence views. Create basic demographics and encounter Concepts which query our clinical database.","title":"The Building Blocks of Leaf: Concepts"},{"location":"administration/concepts/#configuring-the-sql-compiler","text":"Every Leaf instance assumes that there is a single, consistent field that represents patient identifiers. In OMOP databases this is the person_id field, which can be found on nearly any table with patient data. Likewise, Leaf assumes that longitudinal tables in the database will have a consistent field representing encounter identifiers. In OMOP this is the visit_occurrence_id field. Before starting, let's create two SQL views called v_person and v_visit_occurrence to make the person and visit_occurrence tables simpler to query. This example is specific to OMOP but the approach works for other models as well. Note that pointing Leaf at views is completely optional and demonstrated here for convenience and illustrative purposes. Our v_person view is defined as: CREATE VIEW dbo . v_person AS SELECT p . person_id , p . birth_datetime , gender = c_gender . concept_code , race = c_race . concept_name , ethnicity = c_ethnicity . concept_name , location_state = loc . state FROM dbo . person AS p LEFT JOIN dbo . concept AS c_gender ON p . gender_concept_id = c_gender . concept_id LEFT JOIN dbo . concept AS c_race ON p . race_concept_id = c_race . concept_id LEFT JOIN dbo . concept AS c_ethnicity ON p . ethnicity_concept_id = c_ethnicity . concept_id LEFT JOIN dbo . location AS loc ON p . location_id = loc . location_id person_id birth_datetime gender race ethnicity location_state A 1990-1-1 F Black or African American Not Hispanic or Latino NY B 1945-2-2 M Asian or Pacific Islander Not Hispanic or Latino OR The v_visit_occurrence view is defined as: CREATE VIEW dbo . v_visit_occurrence AS SELECT o . person_id , o . visit_occurrence_id , o . visit_start_date , o . visit_end_date , o . care_site_id , visit_type_code = c_visit . concept_code FROM dbo . visit_occurrence AS o LEFT JOIN dbo . concept AS c_visit ON o . visit_concept_id = c_visit . concept_id person_id visit_occurrence_id visit_start_date visit_end_date care_site_id visit_type_code A 123 2011-01-01 2011-01-01 site1 OP A 456 2015-05-28 2015-06-07 site1 IP B 789 2014-09-01 2014-09-01 site2 ED Pretty straightforward so far. After creating the views in the database, let's start by configuring Leaf's SQL compiler, which is stored in your compiled API under /leafapi/api/appsettings.json : Let's break it down: Alias acts as a indicator to Leaf to insert an alias in a SQL statement wherever this character(s) is found (more on that in a bit). We'll set this to @ for simplicity and readability, and because it is commonly used in many Leaf configurations. FieldPersonId is the name of the SQL field that appears in all tables or views we'd like to query and represents unique identifiers for patients. The field person_id contains identifiers for patients and appears in all tables which link to a patient, so we'll choose that. FieldEncounterId is the name of the field that represents visit identifiers, so we'll use visit_occurrence_id . Great - we've now provided the most important information to help Leaf understand the basic structure of our clinical database. Note that these values are expected to be consistent and configured only once. Also, if you change them, make sure you restart the Leaf API in order for the changes to take effect. Next, we'll move on to creating Concepts, the building blocks of Leaf queries.","title":"Configuring the SQL compiler"},{"location":"administration/concepts/#creating-sql-sets","text":"We want to allow users to query Concepts using our two new views, v_person and v_visit_occurrence . To do so, let's create a Leaf SQL Set for each. Open up the Leaf client in your web browser. Click Admin -> Concepts on the left sidebar. If you don't see the Admin tab, make sure you have configured your admin group correctly Click Start by creating a Concept SQL Set . SQL Sets are the SQL tables, views, or subqueries that are the foundation of Concepts and provide their FROM clauses. You should see a single white box near the top. Under SQL FROM , enter dbo.v_person . Next, create another SQL Set . Click + Create New SQL Set and fill in dbo.v_visit_occurrence under SQL FROM . Also, check the Has Encounters box. This indicates that Leaf should expect to find an Encounter identifier and date fields on this table. Under Date Field , fill in @.visit_start_date , which you'll recall is the first date field on the v_visit_occurrence view. Don't forget to prepend the alias placeholder @. before the field name. Click Save at the top. Now we are ready to make a few Concepts that use our v_person and v_visit_occurrence views.","title":"Creating SQL Sets"},{"location":"administration/concepts/#creating-concepts","text":"We've successfully created SQL Sets for our views, so we can now create Concepts that users can interact with. Our next goal will be to create a basic Concept tree with the following structure: Demographics \u251c\u2500\u2500 Gender \u2502 \u251c\u2500\u2500 Female \u2502 \u251c\u2500\u2500 Male Encounters \u251c\u2500\u2500 Inpatient \u251c\u2500\u2500 Outpatient Go to Admin -> Concepts , then click +Create New Concept .","title":"Creating Concepts"},{"location":"administration/concepts/#demographics","text":"Under Name , fill in \"Demographics\". This will be the text that users see in the Concept tree. Go down to Full Text and enter \"Have demographics\". Users will see this text if dragged over to create a query. Why is Full Text different than Name ? The intent here is to make the query as descriptive as possible in something approximating an English sentence. Lastly, under the SQL section make sure the Table, View, or Subquery box shows dbo.v_person and the WHERE Clause field is empty. Click Save at the top. As you may have noticed, this Concept is intended to simply serve as a hierachical container for Concepts under it related to Demographics. By itself it will likely not be very useful to users, and if they were to drag it over the query would be something simple like SELECT person_id FROM dbo.v_person , in other words, all patients in the table. Next let's create the Gender Concept, which will appear under Demographics . Click +Create New Concept at the top.","title":"Demographics"},{"location":"administration/concepts/#gender","text":"Under Name , fill in \"Gender\", and under Full Text , fill in \"Identify with a gender\". We want this Concept to appear beneath Demographics , so drag the new Concept into it in order set Demographics as the parent Concept. Finally, as this Concept represents data about patient gender, users presumably would expect that patients without this data should be excluded. Under SQL -> WHERE Clause enter @.gender IS NOT NULL . Click Save . Repeat the process for the final two demographic Concepts, Female and Male , with the following data: Female General Display Name : \"Female\" Full text : \"Identify as female\" SQL Table, View, or Subquery : \"dbo.v_person\" WHERE Clause : \"@.gender = 'F'\" Male General Display Name : \"Male\" Full text : \"Identify as male\" SQL Table, View, or Subquery : \"dbo.v_person\" WHERE Clause : \"@.gender = 'M'\" In reality people don't necessarily identify with gender binaries of female or male, and clinical databases will often reflect this. Female and male here are used simply for demonstrative purposes","title":"Gender"},{"location":"administration/concepts/#road-test","text":"Before proceeding to create our Encounters Concepts, let's take a moment to confirm our Demographics Concepts are working as expected by running a quick query to see how many female patients are in our database. Click the Find Patients tab in the upper-left and drag Female over to the first panel. Click Run Query . If you see a count of patients (assuming your database has female patients), great! You can even click (i) -> show detail -> SQL to see the query Leaf created using the new Concept. Success! If your query didn't work (you'll get a modal window notifying you there was an error), check the Leaf logs to see if there were any syntax or other errors in the query","title":"Road test"},{"location":"administration/concepts/#encounters","text":"Now that you're hopefully getting the hang of creating Concepts, let's finish by creating Encounters Concepts so users can query information by encounter types. Remember that the structure should look like this: Encounters \u251c\u2500\u2500 Inpatient \u251c\u2500\u2500 Outpatient The field-level information for each Concept is (making sure to nest Inpatient and Outpatient under Encounters ): Encounters General Display Name : \"Encounters\" Full text : \"Had an encounter\" SQL Table, View, or Subquery : \"dbo.v_visit_occurrence\" WHERE Clause : Inpatient General Display Name : \"Inpatient\" Full text : \"Were admitted as an inpatient\" SQL Table, View, or Subquery : \"dbo.v_visit_occurrence\" WHERE Clause : \"@.visit_type_code = 'IP'\" Outpatient General Display Name : \"Outpatient\" Full text : \"Had an outpatient visit\" SQL Table, View, or Subquery : \"dbo.v_visit_occurrence\" WHERE Clause : \"@.visit_type_code = 'OP'\" And that's it!","title":"Encounters"},{"location":"administration/concepts/#making-concepts-searchable","text":"So you've been able to make Concepts that users can query - great! Over time you'll likely find that your Concept tree will grow as you find new use cases and data sources, and may become cumbersome for users to manually traverse. Leaf's Concept search is a powerful feature which will automatically parse and tokenize the text in your Concepts. This allows users to search for Concepts of interest to them in any word order. To enable this feature, run the app.sp_UpdateSearchIndexTables stored procedure. Leaf search works by using a relatively simple inverted index and forward index search engine in pure SQL. In SQL Server: EXEC app . sp_UpdateSearchIndexTables Warning Be sure to run this stored procedure after any edits or additions to your Concept tree to ensure that users can search the latest text for your Concepts","title":"Making Concepts Searchable"},{"location":"administration/concepts/#final-thoughts","text":"If you were able to successfully make the Concepts in this tutorial, congratulations! Hopefully this was helpful and intuitive enough for you to get started making your clinical database accessible and intuitive for your users as well. Concepts can be extremely flexible and we've only scratched the surface of their functionality. If you'd like to learn more or have questions, head over to the Concept Reference page or jump to a section below: Name, Subtext, and Full Text Tooltips Patient Count Numeric Filters Adding Dropdowns Restricting Access Universal IDs Creating Concepts by SQL Scripts As you were creating Concepts for your database, you may have found yourself thinking that it requires a change in perspective in how you as a developer would query a clinical database versus how best to represent Concepts to users. We've found that this is just as much an art as a science, and it's ultimately an iterative process, so don't worry about getting it perfect the first time.","title":"Final thoughts"},{"location":"administration/dataset_template_reference/","text":"Dataset Templates Reference \u00b6 As mentioned in the Introduction , Datasets can be defined as either: SQL statements which output dynamic columns unique to your data. Or, SQL statements which output templated columns representating of FHIR resources . This page describes templated Dataset shapes. Info SQL Columns of type numeric listed below can be INT , FLOAT , MONEY , NUMERIC , REAL , SMALLINT , SMALLMONEY , or DECIMAL . Observation \u00b6 Dataset Shape 1 - A representation of the FHIR Observation Resource FHIR documention suggests using this resource for Vital signs such as body weight, blood pressure, and temperature Laboratory Data like blood glucose, or an estimated GFR Imaging results like bone density or fetal measurements Clinical Findings such as abdominal tenderness Device measurements such as EKG data or Pulse Oximetry data Clinical assessment tools such as APGAR or a Glasgow Coma Score Personal characteristics: such as eye-color Social history like tobacco use, family support, or cognitive status Core characteristics like pregnancy status, or a death assertion SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X category nvarchar X code nvarchar X effectiveDate datetime X X referenceRangeLow datetime referenceRangeHigh nvarchar specimenType nvarchar valueString nvarchar X valueQuantity numeric valueUnit nvarchar Encounter \u00b6 Dataset Shape 2 - A representation of the FHIR Encounter Resource FHIR documention describes as A patient encounter is characterized by the setting in which it takes place. Amongst them are ambulatory, emergency, home health, inpatient and virtual encounters. An Encounter encompasses the lifecycle from pre-admission, the actual encounter (for ambulatory encounters), and admission, stay and discharge (for inpatient encounters). During the encounter the patient may move from practitioner to practitioner and location to location. SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X admitDate datetime X class nvarchar X dischargeDate datetime X X dischargeDisposition nvarchar location nvarchar X status nvarchar Basic Demographics \u00b6 Dataset Shape 3 - A representation of a combination of the Person and Patient FHIR resources. See the Basic Demographics section above for additional info. SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X addressPostalCode nvarchar X addressState nvarchar X birthDate datetime X X deceasedDateTime datetime X X ethnicity nvarchar X gender nvarchar X deceasedBoolean bit X hispanicBoolean bit X marriedBoolean bit X language nvarchar X maritalStatus nvarchar X mrn nvarchar X X name nvarchar X X race nvarchar X religion nvarchar X Condition \u00b6 Dataset Shape 4 - A representation of the FHIR Condition Resource FHIR documention describes as This resource is used to record detailed information about a condition, problem, diagnosis , or other event, situation, issue, or clinical concept that has risen to a level of concern. The condition could be a point in time diagnosis in context of an encounter, it could be an item on the practitioner\u2019s Problem List, or it could be a concern that doesn\u2019t exist on the practitioner\u2019s Problem List. Often times, a condition is about a clinician's assessment and assertion of a particular aspect of a patient's state of health. It can be used to record information about a disease/illness identified from application of clinical reasoning over the pathologic and pathophysiologic findings (diagnosis), or identification of health issues/situations that a practitioner considers harmful, potentially harmful and may be investigated and managed (problem), or other health issue/situation that may require ongoing monitoring and/or management (health issue/concern) SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X abatementDateTime datetime X category nvarchar X code nvarchar X coding nvarchar X onsetDateTime datetime X X recordedDate nvarchar X text nvarchar X Procedure \u00b6 Dataset Shape 5 - A representation of the FHIR Procedure Resource FHIR documention describes as This resource is used to record the details of current and historical procedures performed on or for a patient. A procedure is an activity that is performed on, with, or for a patient as part of the provision of care. Examples include surgical procedures, diagnostic procedures, endoscopic procedures, biopsies, counseling, physiotherapy, personal support services, adult day care services, non-emergency transportation, home modification, exercise, etc. Procedures may be performed by a healthcare professional, a service provider, a friend or relative or in some cases by the patient themselves SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X category nvarchar X code nvarchar X coding nvarchar X performedDateTime datetime X X text nvarchar X Immunization \u00b6 Dataset Shape 6 - A representation of the FHIR Immunization Resource FHIR documention describes as The Immunization resource is intended to cover the recording of current and historical administration of vaccines to patients across all healthcare disciplines in all care settings and all regions. This includes immunization of both humans and animals but does not include the administration of non-vaccine agents, even those that may have or claim to have immunological effects. While the terms \"immunization\" and \"vaccination\" are not clinically identical, for the purposes of the FHIR resources, the terms are used synonymously SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X coding nvarchar X doseQuantity numeric doseUnit nvarchar occurenceDateTime datetime X X route nvarchar text nvarchar X vaccineCode nvarchar X Allergy \u00b6 Dataset Shape 7 - A representation of the FHIR AllergyIntolerance Resource FHIR documention describes as A record of a clinical assessment of an allergy or intolerance; a propensity, or a potential risk to an individual, to have an adverse reaction on future exposure to the specified substance, or class of substance SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X category nvarchar X code nvarchar X coding nvarchar X onsetDateTime datetime X X recordedDate datetime X text nvarchar X MedicationRequest \u00b6 Dataset Shape 8 - A representation of the FHIR MedicationRequest Resource FHIR documention describes as This resource covers all type of orders for medications for a patient . This includes inpatient medication orders as well as community orders (whether filled by the prescriber or by a pharmacy). It also includes orders for over-the-counter medications (e.g. Aspirin), total parenteral nutrition and diet/ vitamin supplements. It may be used to support the order of medication-related devices. It is not intended for use in prescribing particular diets, or for ordering non-medication-related items (eyeglasses, supplies, etc.). In addition, the MedicationRequest may be used to report orders/request from external systems that have been reported for informational purposes and are not authoritative and are not expected to be acted upon (e.g. dispensed or administered) SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X amount numeric authoredOn datetime X X category nvarchar X code nvarchar X coding nvarchar X form nvarchar text nvarchar X unit nvarchar MedicationAdministration \u00b6 Dataset Shape 9 - A representation of the FHIR MedicationAdministration Resource FHIR documention describes as This resource covers the administration of all medications and vaccines . Please refer to the Immunization Resource/Profile for the treatment of vaccines. It will principally be used within care settings (including inpatient) to record the capture of medication administrations, including self-administrations of oral medications, injections, intra-venous adjustments, etc. It can also be used in outpatient settings to record allergy shots and other non-immunization administrations. In some cases, it might be used for home-health reporting, such as recording self-administered or even device-administered insulin SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X code nvarchar X coding nvarchar X doseQuantity numeric doseUnit nvarchar effectiveDateTime datetime X X route nvarchar text nvarchar X","title":"Dataset Templates Reference"},{"location":"administration/dataset_template_reference/#dataset-templates-reference","text":"As mentioned in the Introduction , Datasets can be defined as either: SQL statements which output dynamic columns unique to your data. Or, SQL statements which output templated columns representating of FHIR resources . This page describes templated Dataset shapes. Info SQL Columns of type numeric listed below can be INT , FLOAT , MONEY , NUMERIC , REAL , SMALLINT , SMALLMONEY , or DECIMAL .","title":"Dataset Templates Reference"},{"location":"administration/dataset_template_reference/#observation","text":"Dataset Shape 1 - A representation of the FHIR Observation Resource FHIR documention suggests using this resource for Vital signs such as body weight, blood pressure, and temperature Laboratory Data like blood glucose, or an estimated GFR Imaging results like bone density or fetal measurements Clinical Findings such as abdominal tenderness Device measurements such as EKG data or Pulse Oximetry data Clinical assessment tools such as APGAR or a Glasgow Coma Score Personal characteristics: such as eye-color Social history like tobacco use, family support, or cognitive status Core characteristics like pregnancy status, or a death assertion SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X category nvarchar X code nvarchar X effectiveDate datetime X X referenceRangeLow datetime referenceRangeHigh nvarchar specimenType nvarchar valueString nvarchar X valueQuantity numeric valueUnit nvarchar","title":"Observation"},{"location":"administration/dataset_template_reference/#encounter","text":"Dataset Shape 2 - A representation of the FHIR Encounter Resource FHIR documention describes as A patient encounter is characterized by the setting in which it takes place. Amongst them are ambulatory, emergency, home health, inpatient and virtual encounters. An Encounter encompasses the lifecycle from pre-admission, the actual encounter (for ambulatory encounters), and admission, stay and discharge (for inpatient encounters). During the encounter the patient may move from practitioner to practitioner and location to location. SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X admitDate datetime X class nvarchar X dischargeDate datetime X X dischargeDisposition nvarchar location nvarchar X status nvarchar","title":"Encounter"},{"location":"administration/dataset_template_reference/#basic-demographics","text":"Dataset Shape 3 - A representation of a combination of the Person and Patient FHIR resources. See the Basic Demographics section above for additional info. SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X addressPostalCode nvarchar X addressState nvarchar X birthDate datetime X X deceasedDateTime datetime X X ethnicity nvarchar X gender nvarchar X deceasedBoolean bit X hispanicBoolean bit X marriedBoolean bit X language nvarchar X maritalStatus nvarchar X mrn nvarchar X X name nvarchar X X race nvarchar X religion nvarchar X","title":"Basic Demographics"},{"location":"administration/dataset_template_reference/#condition","text":"Dataset Shape 4 - A representation of the FHIR Condition Resource FHIR documention describes as This resource is used to record detailed information about a condition, problem, diagnosis , or other event, situation, issue, or clinical concept that has risen to a level of concern. The condition could be a point in time diagnosis in context of an encounter, it could be an item on the practitioner\u2019s Problem List, or it could be a concern that doesn\u2019t exist on the practitioner\u2019s Problem List. Often times, a condition is about a clinician's assessment and assertion of a particular aspect of a patient's state of health. It can be used to record information about a disease/illness identified from application of clinical reasoning over the pathologic and pathophysiologic findings (diagnosis), or identification of health issues/situations that a practitioner considers harmful, potentially harmful and may be investigated and managed (problem), or other health issue/situation that may require ongoing monitoring and/or management (health issue/concern) SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X abatementDateTime datetime X category nvarchar X code nvarchar X coding nvarchar X onsetDateTime datetime X X recordedDate nvarchar X text nvarchar X","title":"Condition"},{"location":"administration/dataset_template_reference/#procedure","text":"Dataset Shape 5 - A representation of the FHIR Procedure Resource FHIR documention describes as This resource is used to record the details of current and historical procedures performed on or for a patient. A procedure is an activity that is performed on, with, or for a patient as part of the provision of care. Examples include surgical procedures, diagnostic procedures, endoscopic procedures, biopsies, counseling, physiotherapy, personal support services, adult day care services, non-emergency transportation, home modification, exercise, etc. Procedures may be performed by a healthcare professional, a service provider, a friend or relative or in some cases by the patient themselves SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X category nvarchar X code nvarchar X coding nvarchar X performedDateTime datetime X X text nvarchar X","title":"Procedure"},{"location":"administration/dataset_template_reference/#immunization","text":"Dataset Shape 6 - A representation of the FHIR Immunization Resource FHIR documention describes as The Immunization resource is intended to cover the recording of current and historical administration of vaccines to patients across all healthcare disciplines in all care settings and all regions. This includes immunization of both humans and animals but does not include the administration of non-vaccine agents, even those that may have or claim to have immunological effects. While the terms \"immunization\" and \"vaccination\" are not clinically identical, for the purposes of the FHIR resources, the terms are used synonymously SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X coding nvarchar X doseQuantity numeric doseUnit nvarchar occurenceDateTime datetime X X route nvarchar text nvarchar X vaccineCode nvarchar X","title":"Immunization"},{"location":"administration/dataset_template_reference/#allergy","text":"Dataset Shape 7 - A representation of the FHIR AllergyIntolerance Resource FHIR documention describes as A record of a clinical assessment of an allergy or intolerance; a propensity, or a potential risk to an individual, to have an adverse reaction on future exposure to the specified substance, or class of substance SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X category nvarchar X code nvarchar X coding nvarchar X onsetDateTime datetime X X recordedDate datetime X text nvarchar X","title":"Allergy"},{"location":"administration/dataset_template_reference/#medicationrequest","text":"Dataset Shape 8 - A representation of the FHIR MedicationRequest Resource FHIR documention describes as This resource covers all type of orders for medications for a patient . This includes inpatient medication orders as well as community orders (whether filled by the prescriber or by a pharmacy). It also includes orders for over-the-counter medications (e.g. Aspirin), total parenteral nutrition and diet/ vitamin supplements. It may be used to support the order of medication-related devices. It is not intended for use in prescribing particular diets, or for ordering non-medication-related items (eyeglasses, supplies, etc.). In addition, the MedicationRequest may be used to report orders/request from external systems that have been reported for informational purposes and are not authoritative and are not expected to be acted upon (e.g. dispensed or administered) SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X amount numeric authoredOn datetime X X category nvarchar X code nvarchar X coding nvarchar X form nvarchar text nvarchar X unit nvarchar","title":"MedicationRequest"},{"location":"administration/dataset_template_reference/#medicationadministration","text":"Dataset Shape 9 - A representation of the FHIR MedicationAdministration Resource FHIR documention describes as This resource covers the administration of all medications and vaccines . Please refer to the Immunization Resource/Profile for the treatment of vaccines. It will principally be used within care settings (including inpatient) to record the capture of medication administrations, including self-administrations of oral medications, injections, intra-venous adjustments, etc. It can also be used in outpatient settings to record allergy shots and other non-immunization administrations. In some cases, it might be used for home-health reporting, such as recording self-administered or even device-administered insulin SQL Columns ( source ): Name Type Required Is PHI personId nvarchar X X encounterId nvarchar X X code nvarchar X coding nvarchar X doseQuantity numeric doseUnit nvarchar effectiveDateTime datetime X X route nvarchar text nvarchar X","title":"MedicationAdministration"},{"location":"administration/datasets/","text":"Extracting Data for a Cohort: Datasets \u00b6 At a high level, Leaf aims to do two things: Identify cohorts of patients (using Concepts ). Extract data for those patients. After users identify a Cohort in (1), they can next do (2), which we'll explain here. In Leaf, extracted data for a cohort are called \"datasets\", which is short-hand for Patient List Datasets . This refers to the row-level patient data you can see on the Patient List screen. Datasets can based on either: SQL statements which output dynamic columns unique to your data. Or, SQL statements which output templated columns representating of FHIR resources . We recommend using templated FHIR Datasets (2) only if you are federating your Leaf instance with other institutions , as FHIR templates allow Leaf instances to all return predictable row-level data. In all other cases, we recommend using dynamic datasets (1), as they offer flexible, easy configurability . Basic Demographics \u00b6 The core dataset Leaf uses is Basic Demographics . The output of this query is used to both populate the initial Patient List screen, as well as populate the bar charts on the Visualize screen. The fields in Basic Demographics represent a denormalized combination of the FHIR Person and Patient resources. The expected columns are: Name Type personId nvarchar addressPostalCode nvarchar addressState nvarchar birthDate datetime deceasedDateTime datetime ethnicity nvarchar gender nvarchar deceasedBoolean bit hispanicBoolean bit marriedBoolean bit language nvarchar maritalStatus nvarchar mrn nvarchar name nvarchar race nvarchar religion nvarchar Key Points \u00b6 All columns in Basic Demongraphics are required Leaf will automatically date-shift, calculate ages, and remove the HIPAA identified columns ( mrn and name ) depending on if the user is in Identified or De-identified mode The Patient Identifier column must be called personId While Leaf Concepts are flexible regarding the column name for patient identifiers, Datasets are more restrictive and require a predictable, specific column name. This ensures alignment of Leaf Datasets when multiple Leaf instances are federated, among other reasons It's OK if you don't have data for every column Though every column must be returned in the SQL statement, it's fine to hard-code it as NULL or 'Unknown' , etc. For example, religion = NULL The isDeceased , isHispanic , and isMarried bit/boolean columns are used in the bar charts on the Visualize screen These are needed because Leaf does not enforce specific values for the ethnicity or maritalStatus columns (so you have flexiblity in showing your data as it is), but in return you need to define these true/false columns yourself. For example, hispanicBoolean = CAST(CASE ethnicity WHEN 'Hispanic or Latino' THEN 1 ELSE 0 END AS BIT) Values in gender must be F , Female , M , or Male This allows them to be predictably aggregated in bar charts (case insensitive) Defining the Basic Demographics Query \u00b6 Basic Demographics and other datasets can be added using the Admin page within Leaf. Define a query in SQL that returns the columns defined above. Make sure each column returns the expected type as well. In Leaf, go to Admin -> Datasets . If you haven't created a Basic Demographics dataset yet, Leaf will suggest you create one. Click to do so. Copy/paste or type out your SQL statement. Make sure the green arrows on the left light up to confirm you're returning all expected columns. Info You don't need to do anything special to find a particular cohort of patients; just make a plain SQL statement to find any cohort. Leaf will automatically wrap your SQL in a Common Table Expression and filter it to relevant patients for you. Using OMOP? Try this Basic Demographics SQL query as a starting point: SELECT personId = CONVERT ( NVARCHAR ( 10 ), P . person_id ) , addressPostalCode = L . zip , addressState = L .[ state ] , birthDate = P . birth_datetime , deceasedDateTime = D . death_datetime , ethnicity = c_ethnicity . concept_name , gender = c_gender . concept_name , deceasedBoolean = CONVERT ( BIT , CASE WHEN D . person_id IS NULL THEN 1 ELSE 0 END ) , hispanicBoolean = CONVERT ( BIT , CASE WHEN c_ethnicity . concept_name = 'Hispanic or Latino' THEN 1 ELSE 0 END ) , marriedBoolean = CONVERT ( BIT , 0 ) /* Assumed not available */ , language = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , maritalStatus = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , mrn = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , name = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , religion = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , race = c_race . concept_name FROM dbo . person AS P LEFT JOIN dbo . concept AS c_gender ON P . gender_concept_id = c_gender . concept_id LEFT JOIN dbo . concept AS c_race ON P . race_concept_id = c_race . concept_id LEFT JOIN dbo . concept AS c_ethnicity ON p . ethnicity_concept_id = c_ethnicity . concept_id LEFT JOIN dbo .[ location ] AS L ON P . location_id = L . location_id LEFT JOIN dbo . death AS D ON P . person_id = D . person_id Adding New Datasets \u00b6 If you've successfully added the Basic Demographics dataset and can see data returned in the Patient List screen in the Leaf user interface, you're off to a great start. Inevitably though you'll likely want to allow users to add more datasets beyond demographics. Let's start with an example. In this case, we'll add a Platelet dataset which will represent platelet count laboratory tests. Determine the Template and Query \u00b6 First, we need to decide whether we're using a Dataset template or dynamic query. For templates, in FHIR labs are generally represented as Observations . However as we recommend using Dynamic datasets unless federating with other Leaf instances , we'll use a dynamic dataset here here. For demonstrative purposes we'll use data from the MIMIC Critical Care Database , but the methods here can be applied to other data models as well. Let's suppose we have a SQL table or view representing labs (including platelets) called dbo.v_LABEVENTS that looks like this in our SQL database: SUBJECT_ID HADM_ID LABEL LOINC_CODE CHARTIME VALUE VALUENUM VALUEUOM 1 100 Platelet Count 777-3 2101-10-04 301 301 K/uL 1 200 Platelet Count 777-3 2101-02-10 192 192 K/uL 2 300 Platelet Count 777-3 2101-12-22 533 533 K/uL Our SQL statement to pull this data in Leaf may therefore look like (changing the column names a bit to make the meaning more clear to users) SELECT personId = CAST ( SUBJECT_ID AS NVARCHAR ( 10 )) , encounterId = CAST ( HADM_ID AS NVARCHAR ( 10 )) , category = 'lab' , code = LOINC_CODE , effectiveDate = CHARTTIME , valueString = VALUE , valueQuantity = VALUENUM , valueUnit = VALUEUOM FROM [ dbo ].[ v_LABEVENTS ] WHERE LABEL = 'Platelet Count' Which would output: personId encounterId category code effectiveDate valueString valueQuantity valueUnit 1 100 lab 777-3 2101-10-04 301 301 K/uL 1 200 lab 777-3 2101-02-10 192 192 K/uL 2 300 lab 777-3 2101-12-22 533 533 K/uL Insert the dataset \u00b6 Next, we'll add out dataset using the Admin -> Datasets screen. As we did with Basic Demographics, we'll first define a query in SQL that returns the columns defined above. In Leaf, go to Admin -> Datasets . Click create a new one on the right to add a Dataset . Set the Name as \"Platelet Count\". Create a new Category, \"Labs\", and use that as the Category. Set the Dataset Template as \"Dynamic\". Copy/paste or type out your SQL statement. Under Expected Columns , Leaf will do it's best to guess the types of your columns based on their names. Validate that the column types match those in the SQL database, and check Deidentify for any columns you'd like users not to view if in de-identified mode . Under Dynamic Properties , set the Date Column as \"effectiveDate\", String Value Column as \"valueString\", and Numeric Value Column as \"valueQuantity\". Leaf will use these columns when computing statistics and generating a sparkline for the Dataset . Test \u00b6 Finally, let's test to see if the dataset works. In the Leaf client app, run a query for a cohort which you know to have platelet lab values. In the Patient List , select the new dataset. If you run into errors, be sure to check the Leaf logs If you're able to navigate to the Patient List and add the new dataset, congratulations! Leaf automatically determines that this is a numeric dataset because the valueQuantity field is populated, and computes statistics for each patient. Pretty cool, eh?","title":"Extracting Data for a Cohort: Datasets"},{"location":"administration/datasets/#extracting-data-for-a-cohort-datasets","text":"At a high level, Leaf aims to do two things: Identify cohorts of patients (using Concepts ). Extract data for those patients. After users identify a Cohort in (1), they can next do (2), which we'll explain here. In Leaf, extracted data for a cohort are called \"datasets\", which is short-hand for Patient List Datasets . This refers to the row-level patient data you can see on the Patient List screen. Datasets can based on either: SQL statements which output dynamic columns unique to your data. Or, SQL statements which output templated columns representating of FHIR resources . We recommend using templated FHIR Datasets (2) only if you are federating your Leaf instance with other institutions , as FHIR templates allow Leaf instances to all return predictable row-level data. In all other cases, we recommend using dynamic datasets (1), as they offer flexible, easy configurability .","title":"Extracting Data for a Cohort: Datasets"},{"location":"administration/datasets/#basic-demographics","text":"The core dataset Leaf uses is Basic Demographics . The output of this query is used to both populate the initial Patient List screen, as well as populate the bar charts on the Visualize screen. The fields in Basic Demographics represent a denormalized combination of the FHIR Person and Patient resources. The expected columns are: Name Type personId nvarchar addressPostalCode nvarchar addressState nvarchar birthDate datetime deceasedDateTime datetime ethnicity nvarchar gender nvarchar deceasedBoolean bit hispanicBoolean bit marriedBoolean bit language nvarchar maritalStatus nvarchar mrn nvarchar name nvarchar race nvarchar religion nvarchar","title":"Basic Demographics"},{"location":"administration/datasets/#key-points","text":"All columns in Basic Demongraphics are required Leaf will automatically date-shift, calculate ages, and remove the HIPAA identified columns ( mrn and name ) depending on if the user is in Identified or De-identified mode The Patient Identifier column must be called personId While Leaf Concepts are flexible regarding the column name for patient identifiers, Datasets are more restrictive and require a predictable, specific column name. This ensures alignment of Leaf Datasets when multiple Leaf instances are federated, among other reasons It's OK if you don't have data for every column Though every column must be returned in the SQL statement, it's fine to hard-code it as NULL or 'Unknown' , etc. For example, religion = NULL The isDeceased , isHispanic , and isMarried bit/boolean columns are used in the bar charts on the Visualize screen These are needed because Leaf does not enforce specific values for the ethnicity or maritalStatus columns (so you have flexiblity in showing your data as it is), but in return you need to define these true/false columns yourself. For example, hispanicBoolean = CAST(CASE ethnicity WHEN 'Hispanic or Latino' THEN 1 ELSE 0 END AS BIT) Values in gender must be F , Female , M , or Male This allows them to be predictably aggregated in bar charts (case insensitive)","title":"Key Points"},{"location":"administration/datasets/#defining-the-basic-demographics-query","text":"Basic Demographics and other datasets can be added using the Admin page within Leaf. Define a query in SQL that returns the columns defined above. Make sure each column returns the expected type as well. In Leaf, go to Admin -> Datasets . If you haven't created a Basic Demographics dataset yet, Leaf will suggest you create one. Click to do so. Copy/paste or type out your SQL statement. Make sure the green arrows on the left light up to confirm you're returning all expected columns. Info You don't need to do anything special to find a particular cohort of patients; just make a plain SQL statement to find any cohort. Leaf will automatically wrap your SQL in a Common Table Expression and filter it to relevant patients for you. Using OMOP? Try this Basic Demographics SQL query as a starting point: SELECT personId = CONVERT ( NVARCHAR ( 10 ), P . person_id ) , addressPostalCode = L . zip , addressState = L .[ state ] , birthDate = P . birth_datetime , deceasedDateTime = D . death_datetime , ethnicity = c_ethnicity . concept_name , gender = c_gender . concept_name , deceasedBoolean = CONVERT ( BIT , CASE WHEN D . person_id IS NULL THEN 1 ELSE 0 END ) , hispanicBoolean = CONVERT ( BIT , CASE WHEN c_ethnicity . concept_name = 'Hispanic or Latino' THEN 1 ELSE 0 END ) , marriedBoolean = CONVERT ( BIT , 0 ) /* Assumed not available */ , language = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , maritalStatus = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , mrn = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , name = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , religion = CONVERT ( NVARCHAR ( 1 ), NULL ) /* Assumed not available */ , race = c_race . concept_name FROM dbo . person AS P LEFT JOIN dbo . concept AS c_gender ON P . gender_concept_id = c_gender . concept_id LEFT JOIN dbo . concept AS c_race ON P . race_concept_id = c_race . concept_id LEFT JOIN dbo . concept AS c_ethnicity ON p . ethnicity_concept_id = c_ethnicity . concept_id LEFT JOIN dbo .[ location ] AS L ON P . location_id = L . location_id LEFT JOIN dbo . death AS D ON P . person_id = D . person_id","title":"Defining the Basic Demographics Query"},{"location":"administration/datasets/#adding-new-datasets","text":"If you've successfully added the Basic Demographics dataset and can see data returned in the Patient List screen in the Leaf user interface, you're off to a great start. Inevitably though you'll likely want to allow users to add more datasets beyond demographics. Let's start with an example. In this case, we'll add a Platelet dataset which will represent platelet count laboratory tests.","title":"Adding New Datasets"},{"location":"administration/datasets/#determine-the-template-and-query","text":"First, we need to decide whether we're using a Dataset template or dynamic query. For templates, in FHIR labs are generally represented as Observations . However as we recommend using Dynamic datasets unless federating with other Leaf instances , we'll use a dynamic dataset here here. For demonstrative purposes we'll use data from the MIMIC Critical Care Database , but the methods here can be applied to other data models as well. Let's suppose we have a SQL table or view representing labs (including platelets) called dbo.v_LABEVENTS that looks like this in our SQL database: SUBJECT_ID HADM_ID LABEL LOINC_CODE CHARTIME VALUE VALUENUM VALUEUOM 1 100 Platelet Count 777-3 2101-10-04 301 301 K/uL 1 200 Platelet Count 777-3 2101-02-10 192 192 K/uL 2 300 Platelet Count 777-3 2101-12-22 533 533 K/uL Our SQL statement to pull this data in Leaf may therefore look like (changing the column names a bit to make the meaning more clear to users) SELECT personId = CAST ( SUBJECT_ID AS NVARCHAR ( 10 )) , encounterId = CAST ( HADM_ID AS NVARCHAR ( 10 )) , category = 'lab' , code = LOINC_CODE , effectiveDate = CHARTTIME , valueString = VALUE , valueQuantity = VALUENUM , valueUnit = VALUEUOM FROM [ dbo ].[ v_LABEVENTS ] WHERE LABEL = 'Platelet Count' Which would output: personId encounterId category code effectiveDate valueString valueQuantity valueUnit 1 100 lab 777-3 2101-10-04 301 301 K/uL 1 200 lab 777-3 2101-02-10 192 192 K/uL 2 300 lab 777-3 2101-12-22 533 533 K/uL","title":"Determine the Template and Query"},{"location":"administration/datasets/#insert-the-dataset","text":"Next, we'll add out dataset using the Admin -> Datasets screen. As we did with Basic Demographics, we'll first define a query in SQL that returns the columns defined above. In Leaf, go to Admin -> Datasets . Click create a new one on the right to add a Dataset . Set the Name as \"Platelet Count\". Create a new Category, \"Labs\", and use that as the Category. Set the Dataset Template as \"Dynamic\". Copy/paste or type out your SQL statement. Under Expected Columns , Leaf will do it's best to guess the types of your columns based on their names. Validate that the column types match those in the SQL database, and check Deidentify for any columns you'd like users not to view if in de-identified mode . Under Dynamic Properties , set the Date Column as \"effectiveDate\", String Value Column as \"valueString\", and Numeric Value Column as \"valueQuantity\". Leaf will use these columns when computing statistics and generating a sparkline for the Dataset .","title":"Insert the dataset"},{"location":"administration/datasets/#test","text":"Finally, let's test to see if the dataset works. In the Leaf client app, run a query for a cohort which you know to have platelet lab values. In the Patient List , select the new dataset. If you run into errors, be sure to check the Leaf logs If you're able to navigate to the Patient List and add the new dataset, congratulations! Leaf automatically determines that this is a numeric dataset because the valueQuantity field is populated, and computes statistics for each patient. Pretty cool, eh?","title":"Test"},{"location":"administration/federation/","text":"Networking Multiple Leaf instances \u00b6 One powerful feature of Leaf is the ability to federate user queries to multiple Leaf instances, even those using different data models. This enables institutions to securely compare patient populations in a de-identified fashion. An example of this functionality can be found at https://www.youtube.com/watch?v=ZuKKC7B8mHI . Info Networking with other Leaf instances is 100% opt-in functionality. Deploying locally and querying only your institution's data is perfectly fine. Building Blocks \u00b6 Leaf achieves safe federation by leveraging existing web technology to establish cryptographic trust between instances. This mechanism is virtually identical to the way that SAML2 federated authentication establishes trust and is built on JSON Web Tokens (JWT). The core building block of federated communication is a uni-directional channel; composing two uni-directional channels together provides the bi-directional query functionality of mutually federated instances. Federation is opt-in and requires that two instances be in agreement about their relationship. A single endpoint can be configured in either, or both, of the following states: Responder \u00b6 A Responder endpoint is an instance of Leaf's API that will answer query requests, provided that it has configured your instance as an Interrogator . Interrogator \u00b6 An Interrogator endpoint is an instance of Leaf's API that will be allowed to send query requests to your API instance. The federated Responder in turn must have your instance configured as a Responder for requests to come through. Cross-pollinating API instance certificates \u00b6 Log into a Leaf admin account and navigate to Admin -> Network and Identity . Click + Add New Networked Leaf Instance . Enter the name and URI for the instance you wish to federate with. Click Load Certificate Information . Configure the endpoint's Responder (we can query them) and Interrogator (they can query us) roles, see below for examples. Click Save . Examples \u00b6 Bi-directional Federation \u00b6 In this (most common) example, two nodes A and B wish to query each other. This configuration requires that A registers B as a Responder and Interrogator , and B registers A as a Responder and Interrogator . The following screenshots illustrate A and B's admin panel screen, respectively. Instance A's networking configuration Instance B's networking configuration Uni-directional Federation \u00b6 In this example, there are two nodes X and Y where X would like to additionally query Y for data but Y has no need to query X. X registers Y as a Responder , and Y must register X as an Interrogator . This type of configuration can be composed with Gateway functionality in cases where an instance wishes to act as an observer only and has no data of its own to offer. The following screenshots illustrate X and Y's admin panel screen, respectively. Instance X's networking configuration Instance Y's networking configuration","title":"Networking Multiple Leaf instances"},{"location":"administration/federation/#networking-multiple-leaf-instances","text":"One powerful feature of Leaf is the ability to federate user queries to multiple Leaf instances, even those using different data models. This enables institutions to securely compare patient populations in a de-identified fashion. An example of this functionality can be found at https://www.youtube.com/watch?v=ZuKKC7B8mHI . Info Networking with other Leaf instances is 100% opt-in functionality. Deploying locally and querying only your institution's data is perfectly fine.","title":"Networking Multiple Leaf instances"},{"location":"administration/federation/#building-blocks","text":"Leaf achieves safe federation by leveraging existing web technology to establish cryptographic trust between instances. This mechanism is virtually identical to the way that SAML2 federated authentication establishes trust and is built on JSON Web Tokens (JWT). The core building block of federated communication is a uni-directional channel; composing two uni-directional channels together provides the bi-directional query functionality of mutually federated instances. Federation is opt-in and requires that two instances be in agreement about their relationship. A single endpoint can be configured in either, or both, of the following states:","title":"Building Blocks"},{"location":"administration/federation/#responder","text":"A Responder endpoint is an instance of Leaf's API that will answer query requests, provided that it has configured your instance as an Interrogator .","title":"Responder"},{"location":"administration/federation/#interrogator","text":"An Interrogator endpoint is an instance of Leaf's API that will be allowed to send query requests to your API instance. The federated Responder in turn must have your instance configured as a Responder for requests to come through.","title":"Interrogator"},{"location":"administration/federation/#cross-pollinating-api-instance-certificates","text":"Log into a Leaf admin account and navigate to Admin -> Network and Identity . Click + Add New Networked Leaf Instance . Enter the name and URI for the instance you wish to federate with. Click Load Certificate Information . Configure the endpoint's Responder (we can query them) and Interrogator (they can query us) roles, see below for examples. Click Save .","title":"Cross-pollinating API instance certificates"},{"location":"administration/federation/#examples","text":"","title":"Examples"},{"location":"administration/federation/#bi-directional-federation","text":"In this (most common) example, two nodes A and B wish to query each other. This configuration requires that A registers B as a Responder and Interrogator , and B registers A as a Responder and Interrogator . The following screenshots illustrate A and B's admin panel screen, respectively. Instance A's networking configuration Instance B's networking configuration","title":"Bi-directional Federation"},{"location":"administration/federation/#uni-directional-federation","text":"In this example, there are two nodes X and Y where X would like to additionally query Y for data but Y has no need to query X. X registers Y as a Responder , and Y must register X as an Interrogator . This type of configuration can be composed with Gateway functionality in cases where an instance wishes to act as an observer only and has no data of its own to offer. The following screenshots illustrate X and Y's admin panel screen, respectively. Instance X's networking configuration Instance Y's networking configuration","title":"Uni-directional Federation"},{"location":"development_and_testing/","text":"Development and Testing \u00b6 Interested in trying Leaf out? Great! Below are a few options, depending on your environment and preferences. I want to: Test Leaf out on my computer or server Develop or Edit Leaf's source code","title":"Development and Testing"},{"location":"development_and_testing/#development-and-testing","text":"Interested in trying Leaf out? Great! Below are a few options, depending on your environment and preferences. I want to: Test Leaf out on my computer or server Develop or Edit Leaf's source code","title":"Development and Testing"},{"location":"development_and_testing/development/","text":"Running Leaf as a Developer \u00b6 Select the development environment you'd like to work in: MacOS Coming soon! Windows Coming soon!","title":"Running Leaf as a Developer"},{"location":"development_and_testing/development/#running-leaf-as-a-developer","text":"Select the development environment you'd like to work in: MacOS Coming soon! Windows Coming soon!","title":"Running Leaf as a Developer"},{"location":"development_and_testing/testing/","text":"Testing Leaf \u00b6 Interesting in trying Leaf out? Great! Below are a few options, depending on your environment and preferences. Local Computer MacOS These instructions assume you Are comfortable using bash or other Unix-based command line tools Have Docker installed (to run the API and DB) Have npm installed (to run the client) Have sqlcmd installed (to populate the database) Complete the following steps in the Leaf Installation Guide : 3 - Create a JWT Signing Key 7 - Set Environment Variables Environment Variables must be visible to the Docker containers run from the command line, though you can configure them however you'd like Build and populate the Leaf API and databases. On the command line run: $ cd /leaf $ ./containerize_leaf.sh You should see output indicating the app and clinical database containers are up and populated with data, followed by the API: Alternatives to using containerize_leaf.sh Database - If you have an existing SQL Server Docker container, you can simply build the app database as described in 1 - Create App Database . API - You can either: Manually build and run the Leaf API Dockerfile (see ./containerize_leaf.sh for an example of how to do this) or If you prefer not to use Docker and have the dotnet cli installed , in bash, run: $ cd /leaf/src/server/API $ dotnet run In a separate command line window, run the Leaf client: $ cd /leaf/src/ui-client $ npm install $ npm start Success! Leaf should start up in your browser using http://localhost:3000 If you run into errors check the Leaf Troubleshooting Guide Windows These instructions assume you Have SQL Server 2014+ installed and accessible by localhost with a clinical database available to test with Have a Unix-like command line tool such as Cygwin installed Have the dotnet cli installed (to run the API) Have npm installed (to run the client) Complete the following steps in the Leaf Installation Guide : 1 - Create App Database (on localhost ) 3 - Create a JWT Signing Key 7 - Set Environment Variables Setting Environment Variables at the System level is usually simplest, though any method works as long as the Environment Variables are visible to the API As your application and clinical datatases should now be running on SQL Server localhost , next we'll run the Leaf API. On the command line run: $ cd /leaf/src/server/API $ dotnet run You should see something like: In a separate command line window, run the Leaf client: $ cd /leaf/src/ui-client $ npm install $ npm start Success! Leaf should start up in your browser using http://localhost:3000 If you run into errors check the Leaf Troubleshooting Guide Remote Server Linux Coming soon! Windows Coming soon! Access a UW Test Instance Please contact us at leafsupport@uw.edu , as we have several Leaf instances with synthetic data used for demonstration purposes and hosted at the University of Washington. While we'd like to have these available on the internet without making you jump through hoops, for various security reasons we ask that you just reach out to us and let us know you're interested, after which we'll grant you access.","title":"Testing Leaf"},{"location":"development_and_testing/testing/#testing-leaf","text":"Interesting in trying Leaf out? Great! Below are a few options, depending on your environment and preferences. Local Computer MacOS These instructions assume you Are comfortable using bash or other Unix-based command line tools Have Docker installed (to run the API and DB) Have npm installed (to run the client) Have sqlcmd installed (to populate the database) Complete the following steps in the Leaf Installation Guide : 3 - Create a JWT Signing Key 7 - Set Environment Variables Environment Variables must be visible to the Docker containers run from the command line, though you can configure them however you'd like Build and populate the Leaf API and databases. On the command line run: $ cd /leaf $ ./containerize_leaf.sh You should see output indicating the app and clinical database containers are up and populated with data, followed by the API: Alternatives to using containerize_leaf.sh Database - If you have an existing SQL Server Docker container, you can simply build the app database as described in 1 - Create App Database . API - You can either: Manually build and run the Leaf API Dockerfile (see ./containerize_leaf.sh for an example of how to do this) or If you prefer not to use Docker and have the dotnet cli installed , in bash, run: $ cd /leaf/src/server/API $ dotnet run In a separate command line window, run the Leaf client: $ cd /leaf/src/ui-client $ npm install $ npm start Success! Leaf should start up in your browser using http://localhost:3000 If you run into errors check the Leaf Troubleshooting Guide Windows These instructions assume you Have SQL Server 2014+ installed and accessible by localhost with a clinical database available to test with Have a Unix-like command line tool such as Cygwin installed Have the dotnet cli installed (to run the API) Have npm installed (to run the client) Complete the following steps in the Leaf Installation Guide : 1 - Create App Database (on localhost ) 3 - Create a JWT Signing Key 7 - Set Environment Variables Setting Environment Variables at the System level is usually simplest, though any method works as long as the Environment Variables are visible to the API As your application and clinical datatases should now be running on SQL Server localhost , next we'll run the Leaf API. On the command line run: $ cd /leaf/src/server/API $ dotnet run You should see something like: In a separate command line window, run the Leaf client: $ cd /leaf/src/ui-client $ npm install $ npm start Success! Leaf should start up in your browser using http://localhost:3000 If you run into errors check the Leaf Troubleshooting Guide Remote Server Linux Coming soon! Windows Coming soon! Access a UW Test Instance Please contact us at leafsupport@uw.edu , as we have several Leaf instances with synthetic data used for demonstration purposes and hosted at the University of Washington. While we'd like to have these available on the internet without making you jump through hoops, for various security reasons we ask that you just reach out to us and let us know you're interested, after which we'll grant you access.","title":"Testing Leaf"},{"location":"faqs_and_troubleshooting/","text":"General Questions \u00b6 What makes Leaf unique compared to i2b2 or TriNetX? \u00b6 Answer This is a great question! While a detailed answer would be quite lengthy, here are a few distinguishing features of Leaf: Open - Leaf's codebase is open to the community, and you can use, change, and deploy Leaf as you'd like Adaptable to any data model - Leaf does not assume your data is structured in any particular way Use on your terms - Leaf never \" phones home \", and runs completely on your hardware. No data leaves your servers (besides exports from users, which can be disabled) Free! - We develop and use Leaf internally at the University of Washington and share with the community in the hopes of improving healthcare and collaboration Modern and fun - Leaf uses a cutting-edge development stack ( ReactJS , TypeScript , .NET Core ) that allows for a fun, intuitive user experience that we believe meets or exceeds that of comparable commercial products (which you would pay for, either in software-as-a-service fees or by allowing external use of your data) I just want to test Leaf out. Is there an easy way to do so? \u00b6 Answer Absolutely! Leaf can take time to install and wanting to \" kick the tires \" is understandable. Here are two options, depending on your preference: If you would like to run Leaf on your local computer , check the Testing Leaf page for instructions. If you'd prefer jump in and try Leaf with synthetic data , please contact us at leafsupport@uw.edu , as we have several Leaf instances with synthetic data used for demonstration purposes and hosted at the University of Washington. While we'd like to have these available on the internet without making you jump through hoops, for various security reasons we ask that you just reach out to us and let us know you're interested, after which we'll grant you access.","title":"General Questions"},{"location":"faqs_and_troubleshooting/#general-questions","text":"","title":"General Questions"},{"location":"faqs_and_troubleshooting/#what-makes-leaf-unique-compared-to-i2b2-or-trinetx","text":"Answer This is a great question! While a detailed answer would be quite lengthy, here are a few distinguishing features of Leaf: Open - Leaf's codebase is open to the community, and you can use, change, and deploy Leaf as you'd like Adaptable to any data model - Leaf does not assume your data is structured in any particular way Use on your terms - Leaf never \" phones home \", and runs completely on your hardware. No data leaves your servers (besides exports from users, which can be disabled) Free! - We develop and use Leaf internally at the University of Washington and share with the community in the hopes of improving healthcare and collaboration Modern and fun - Leaf uses a cutting-edge development stack ( ReactJS , TypeScript , .NET Core ) that allows for a fun, intuitive user experience that we believe meets or exceeds that of comparable commercial products (which you would pay for, either in software-as-a-service fees or by allowing external use of your data)","title":"What makes Leaf unique compared to i2b2 or TriNetX?"},{"location":"faqs_and_troubleshooting/#i-just-want-to-test-leaf-out-is-there-an-easy-way-to-do-so","text":"Answer Absolutely! Leaf can take time to install and wanting to \" kick the tires \" is understandable. Here are two options, depending on your preference: If you would like to run Leaf on your local computer , check the Testing Leaf page for instructions. If you'd prefer jump in and try Leaf with synthetic data , please contact us at leafsupport@uw.edu , as we have several Leaf instances with synthetic data used for demonstration purposes and hosted at the University of Washington. While we'd like to have these available on the internet without making you jump through hoops, for various security reasons we ask that you just reach out to us and let us know you're interested, after which we'll grant you access.","title":"I just want to test Leaf out. Is there an easy way to do so?"},{"location":"faqs_and_troubleshooting/installation_questions/","text":"Installation Questions \u00b6 Why do the App and Clinical databases need to be on the same server? \u00b6 Answer UPDATE 2022-05-05 - As of Leaf v3.11 , the App and Clinical databases do not need to be on the same database server. Old answer (pre-v3.11): The reason for this is that after Leaf has executed a \u2018Find Patients\u2019 query, it caches the patient IDs in the app database. When users navigate to the \u2018Visualize\u2019 or \u2018Patient List\u2019 screens, Leaf performs a JOIN query between the cached patient IDs in the app database and patients in the clinical database to quickly retrieve patient demographics. Thus currently both databases need to be on the same server in order for the JOIN operation to work. I'd like to use an RDBMS besides SQL Server. Does Leaf support any? \u00b6 Answer As of Leaf v3.11 , Leaf does! For the Clinical DB, Leaf supports: MySQL MariaDB PostgreSQL Oracle Google BigQuery SQL Server Note that the Leaf App DB must be deployed using SQL Server, however .","title":"Installation Questions"},{"location":"faqs_and_troubleshooting/installation_questions/#installation-questions","text":"","title":"Installation Questions"},{"location":"faqs_and_troubleshooting/installation_questions/#why-do-the-app-and-clinical-databases-need-to-be-on-the-same-server","text":"Answer UPDATE 2022-05-05 - As of Leaf v3.11 , the App and Clinical databases do not need to be on the same database server. Old answer (pre-v3.11): The reason for this is that after Leaf has executed a \u2018Find Patients\u2019 query, it caches the patient IDs in the app database. When users navigate to the \u2018Visualize\u2019 or \u2018Patient List\u2019 screens, Leaf performs a JOIN query between the cached patient IDs in the app database and patients in the clinical database to quickly retrieve patient demographics. Thus currently both databases need to be on the same server in order for the JOIN operation to work.","title":"Why do the App and Clinical databases need to be on the same server?"},{"location":"faqs_and_troubleshooting/installation_questions/#id-like-to-use-an-rdbms-besides-sql-server-does-leaf-support-any","text":"Answer As of Leaf v3.11 , Leaf does! For the Clinical DB, Leaf supports: MySQL MariaDB PostgreSQL Oracle Google BigQuery SQL Server Note that the Leaf App DB must be deployed using SQL Server, however .","title":"I'd like to use an RDBMS besides SQL Server. Does Leaf support any?"},{"location":"faqs_and_troubleshooting/troubleshooting/","text":"Troubleshooting \u00b6 Leaf client errors \u00b6 Startup error: \"Contact your Leaf administrator\" \u00b6 Answer When installing Leaf and running the Leaf client app in your browser, you may run into some variation of this message: The particular message may instead be \" Hmmm... No Leaf server was found \", etc., but the best means of troubleshooting is the same either way. These errors are a symptom of the browser client failing to communicate with the Leaf API. What to do: Check that your API is up-and-running - the Leaf client will only give you vague, indirect information about where the failure lies (note that this is by design and largely for security reasons). There are a number of ways to check if your API is running, including systemctl status or apachectl status (if on Linux), the IIS user interface or Event Viewer (if on Windows), or docker ps -a / podman ps -a (if using containers). Choose the best method appropriate for your deployment. Perhaps most simply, check the Leaf API logs . These will tell you immediately whether the Leaf API successfully started, and/or any errors it has run into along with way. Remember that Leaf API files are stored in the directory you set as your SERILOG_DIR . This can be as simple as: $ tail -10 / $SERILOG_DIR /leaf-api-<todays_date>.log If the API is not running , dig into the logs to see what errors occurred. Often you may find that the API failed to communicate with the Leaf app database (hint: look for \"Error\":\"System.Data.SqlClient.SqlException\" ). These cases are nearly always due to incorrect SQL passwords or usernames configured in your environment variables . If no log files appear and you are running IIS , see I started the Leaf API but don't see any log files! below. Visualization and Patient List error: \"Whoops! An error occurred while loading patient visualizations\" \u00b6 Answer When installing Leaf and running the Leaf client app in your browser, you may run into some variation of this message: These errors result from an error while the API is executing the Basic Demographics query What to do: Check that you've defined a Basic Demographis query - If you haven't yet, go ahead and do so, making sure your output column types match the expected column types. Check the Leaf logs for execution or validation errors - As ensuring de-identification and so on are performed correctly, Leaf is very strict about output column types matching expected column types . The Leaf logs will tell you of any SQL execution errors or column type mismatch errors that occur. I'm trying to build the Leaf client but get the error, \"Failed at...'react-scripts build'\" \u00b6 Answer This is usually caused by older versions of NPM and NodeJS being used. We recommend using NodeJS version 14.9.0+ and NPM version 6.14.8+. You can check your current versions using: $ node --version # v14.9.0 $ npm --version # 6.14.8 If you have an older version, the easiest way to upgrade is typically by using: $ npm upgrade -g See this helpful article or NPM documentation for more information. Alternatively , you could instead also download the latest pre-compiled leaf-ui-client-xxx.tar.gz file from the Leaf Releases page . Leaf API errors \u00b6 I started the Leaf API but don't see any log files! \u00b6 Answer If you are running IIS: Make sure your service account is running in IIS and has permissions to write to the SERILOG_DIR directory. Check the Windows Event Viewer application for possible errors: Check that your browser can communicate with the API - If the API appears to be up, in a separate browser tab, go to https://<your_leaf_url>/api/config . If your browser returns an error with no data: If the error is a 500 , then the API call likely reached the API, but there was an error of some kind. Check the logs to see what went wrong. If the error was a 40x , then the API call likely did not reach the API, in which case your API is not listening or available as you'd expect it to be. In this case, check your Apache or IIS configuration to make sure everything is configured correctly. Note that each of these ( as well as Shibboleth ) include logging of their own which may be helpful. API Error: \"Do not run UNSECURED authentication in non-development environments!\" \u00b6 Answer In a bit of well-intentioned caution, Leaf assumes you will always want to authenticate your users . The reason for this is to prevent inadvertantly allowing access to identified patient information because users weren't authenticated. While that's a precaution, we understand it can also be unhelpful if you're simply evaluating Leaf with synthetic/de-identified data, or only for a small number of users. To do so, as mentioned in the Installation documentation compile the API with: $ dotnet publish -c Debug ...<additional parameters> The -c Debug parameter compiles the Leaf API but relaxes the above requirement. API Error: \"Unable to start Kestrel.\",\"Exception\" : \"System.Net.Sockets.SocketException (13) : Permission denied\" \u00b6 Answer If you are deploying in a Linux environment, be sure the ASPNETCORE_URLS environment variable is set: ASPNETCORE_URLS = http://0.0.0.0:5001 API Error: \"Value cannot be null. (Parameter 'path1')\" \u00b6 Answer This occurs if the API is unable to read your environment variables correctly. Check to make sure those are configured and visible to the API. API Error: \"nameID header not found, no scoped identity available\" \u00b6 Answer This error occurs if Shibboleth attributes aren't correctly mapped to user attributes , and thus aren't sent in headers to the Leaf API. Both Apache and IIS use a remote user, which is a special trusted value populated by various mechanisms ( LOGON_USER , REMOTE_USER ) related to the attributes passed along. What to do: Take a look at the Shibboleth logs to see what is being sent in the SAML message (you may need debug mode set) when a user comes back from the login page and then update the attribute-map.xml such that the web server (Service Provider) has those details passed through to the app. If you\u2019re aiming to follow standards, look to InCommon\u2019s Research and Scholarship area where they have expectations of the following: On the releasing side, see https://wiki.refeds.org/display/ENT/Research+and+Scholarship+IdP+Config On the receiving side, in attribute-map.xml : <!-- displayName --> <Attribute name= \"urn:mace:dir:attribute-def:displayName\" id= \"displayName\" /> <Attribute name= \"urn:oid:2.16.840.1.113730.3.1.241\" id= \"displayName\" /> <!-- email --> <Attribute name= \"urn:mace:dir:attribute-def:mail\" id= \"mail\" /> <Attribute name= \"urn:oid:0.9.2342.19200300.100.1.3\" id= \"mail\" />","title":"Troubleshooting"},{"location":"faqs_and_troubleshooting/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"faqs_and_troubleshooting/troubleshooting/#leaf-client-errors","text":"","title":"Leaf client errors"},{"location":"faqs_and_troubleshooting/troubleshooting/#startup-error-contact-your-leaf-administrator","text":"Answer When installing Leaf and running the Leaf client app in your browser, you may run into some variation of this message: The particular message may instead be \" Hmmm... No Leaf server was found \", etc., but the best means of troubleshooting is the same either way. These errors are a symptom of the browser client failing to communicate with the Leaf API. What to do: Check that your API is up-and-running - the Leaf client will only give you vague, indirect information about where the failure lies (note that this is by design and largely for security reasons). There are a number of ways to check if your API is running, including systemctl status or apachectl status (if on Linux), the IIS user interface or Event Viewer (if on Windows), or docker ps -a / podman ps -a (if using containers). Choose the best method appropriate for your deployment. Perhaps most simply, check the Leaf API logs . These will tell you immediately whether the Leaf API successfully started, and/or any errors it has run into along with way. Remember that Leaf API files are stored in the directory you set as your SERILOG_DIR . This can be as simple as: $ tail -10 / $SERILOG_DIR /leaf-api-<todays_date>.log If the API is not running , dig into the logs to see what errors occurred. Often you may find that the API failed to communicate with the Leaf app database (hint: look for \"Error\":\"System.Data.SqlClient.SqlException\" ). These cases are nearly always due to incorrect SQL passwords or usernames configured in your environment variables . If no log files appear and you are running IIS , see I started the Leaf API but don't see any log files! below.","title":"Startup error: \"Contact your Leaf administrator\""},{"location":"faqs_and_troubleshooting/troubleshooting/#visualization-and-patient-list-error-whoops-an-error-occurred-while-loading-patient-visualizations","text":"Answer When installing Leaf and running the Leaf client app in your browser, you may run into some variation of this message: These errors result from an error while the API is executing the Basic Demographics query What to do: Check that you've defined a Basic Demographis query - If you haven't yet, go ahead and do so, making sure your output column types match the expected column types. Check the Leaf logs for execution or validation errors - As ensuring de-identification and so on are performed correctly, Leaf is very strict about output column types matching expected column types . The Leaf logs will tell you of any SQL execution errors or column type mismatch errors that occur.","title":"Visualization and Patient List error: \"Whoops! An error occurred while loading patient visualizations\""},{"location":"faqs_and_troubleshooting/troubleshooting/#im-trying-to-build-the-leaf-client-but-get-the-error-failed-atreact-scripts-build","text":"Answer This is usually caused by older versions of NPM and NodeJS being used. We recommend using NodeJS version 14.9.0+ and NPM version 6.14.8+. You can check your current versions using: $ node --version # v14.9.0 $ npm --version # 6.14.8 If you have an older version, the easiest way to upgrade is typically by using: $ npm upgrade -g See this helpful article or NPM documentation for more information. Alternatively , you could instead also download the latest pre-compiled leaf-ui-client-xxx.tar.gz file from the Leaf Releases page .","title":"I'm trying to build the Leaf client but get the error, \"Failed at...'react-scripts build'\""},{"location":"faqs_and_troubleshooting/troubleshooting/#leaf-api-errors","text":"","title":"Leaf API errors"},{"location":"faqs_and_troubleshooting/troubleshooting/#i-started-the-leaf-api-but-dont-see-any-log-files","text":"Answer If you are running IIS: Make sure your service account is running in IIS and has permissions to write to the SERILOG_DIR directory. Check the Windows Event Viewer application for possible errors: Check that your browser can communicate with the API - If the API appears to be up, in a separate browser tab, go to https://<your_leaf_url>/api/config . If your browser returns an error with no data: If the error is a 500 , then the API call likely reached the API, but there was an error of some kind. Check the logs to see what went wrong. If the error was a 40x , then the API call likely did not reach the API, in which case your API is not listening or available as you'd expect it to be. In this case, check your Apache or IIS configuration to make sure everything is configured correctly. Note that each of these ( as well as Shibboleth ) include logging of their own which may be helpful.","title":"I started the Leaf API but don't see any log files!"},{"location":"faqs_and_troubleshooting/troubleshooting/#api-error-do-not-run-unsecured-authentication-in-non-development-environments","text":"Answer In a bit of well-intentioned caution, Leaf assumes you will always want to authenticate your users . The reason for this is to prevent inadvertantly allowing access to identified patient information because users weren't authenticated. While that's a precaution, we understand it can also be unhelpful if you're simply evaluating Leaf with synthetic/de-identified data, or only for a small number of users. To do so, as mentioned in the Installation documentation compile the API with: $ dotnet publish -c Debug ...<additional parameters> The -c Debug parameter compiles the Leaf API but relaxes the above requirement.","title":"API Error: \"Do not run UNSECURED authentication in non-development environments!\""},{"location":"faqs_and_troubleshooting/troubleshooting/#api-error-unable-to-start-kestrelexception-systemnetsocketssocketexception-13-permission-denied","text":"Answer If you are deploying in a Linux environment, be sure the ASPNETCORE_URLS environment variable is set: ASPNETCORE_URLS = http://0.0.0.0:5001","title":"API Error: \"Unable to start Kestrel.\",\"Exception\" : \"System.Net.Sockets.SocketException (13) : Permission denied\""},{"location":"faqs_and_troubleshooting/troubleshooting/#api-error-value-cannot-be-null-parameter-path1","text":"Answer This occurs if the API is unable to read your environment variables correctly. Check to make sure those are configured and visible to the API.","title":"API Error: \"Value cannot be null. (Parameter 'path1')\""},{"location":"faqs_and_troubleshooting/troubleshooting/#api-error-nameid-header-not-found-no-scoped-identity-available","text":"Answer This error occurs if Shibboleth attributes aren't correctly mapped to user attributes , and thus aren't sent in headers to the Leaf API. Both Apache and IIS use a remote user, which is a special trusted value populated by various mechanisms ( LOGON_USER , REMOTE_USER ) related to the attributes passed along. What to do: Take a look at the Shibboleth logs to see what is being sent in the SAML message (you may need debug mode set) when a user comes back from the login page and then update the attribute-map.xml such that the web server (Service Provider) has those details passed through to the app. If you\u2019re aiming to follow standards, look to InCommon\u2019s Research and Scholarship area where they have expectations of the following: On the releasing side, see https://wiki.refeds.org/display/ENT/Research+and+Scholarship+IdP+Config On the receiving side, in attribute-map.xml : <!-- displayName --> <Attribute name= \"urn:mace:dir:attribute-def:displayName\" id= \"displayName\" /> <Attribute name= \"urn:oid:2.16.840.1.113730.3.1.241\" id= \"displayName\" /> <!-- email --> <Attribute name= \"urn:mace:dir:attribute-def:mail\" id= \"mail\" /> <Attribute name= \"urn:oid:0.9.2342.19200300.100.1.3\" id= \"mail\" />","title":"API Error: \"nameID header not found, no scoped identity available\""},{"location":"installation/","text":"Architecture \u00b6 Leaf is designed to be deployed in a standard three-tier architecture with two deployment models, depending on your environment: Option 1 : 3-tier architecture with Linux and Apache or alternatively: Option 2 : Combined 2-tier architecture with Windows and IIS Components \u00b6 ** App Database Server**, with The Leaf application database using MS SQL Server (2014+). ** Clinical Database Server**, with The clinical database you'd like Leaf to query, using MySQL , MariaDB , PostgreSQL , Oracle , Google BigQuery , or MS SQL Server *. * If using SQL Server, this may also be the same database server the App Database is deployed to * Prior to Leaf version 3.11, only SQL Server was supported and the App and Clinical databases were required to be on the same database server Application Server , with .NET Core Runtime installed. Web Server , with Apache or IIS installed to handle https routing for requests from the client app . These can be configured to work with a SAML2 Identity Provider to manage user authentication and authorization, such as Shibboleth or ADFS . Info Whether you use 2 or 3 servers, however, in general the deployment strategies are largely the same. For simplicity, in this guide we'll illustrate examples using a 3-tier architecture, but all steps are applicable to either deployment model unless stated otherwise. Tip Looking for a faster way to test Leaf out? Take a look at our Leaf Testing Guide for more information Next: Step 1 - Create the Leaf Application Databse","title":"Architecture"},{"location":"installation/#architecture","text":"Leaf is designed to be deployed in a standard three-tier architecture with two deployment models, depending on your environment: Option 1 : 3-tier architecture with Linux and Apache or alternatively: Option 2 : Combined 2-tier architecture with Windows and IIS","title":"Architecture"},{"location":"installation/#components","text":"** App Database Server**, with The Leaf application database using MS SQL Server (2014+). ** Clinical Database Server**, with The clinical database you'd like Leaf to query, using MySQL , MariaDB , PostgreSQL , Oracle , Google BigQuery , or MS SQL Server *. * If using SQL Server, this may also be the same database server the App Database is deployed to * Prior to Leaf version 3.11, only SQL Server was supported and the App and Clinical databases were required to be on the same database server Application Server , with .NET Core Runtime installed. Web Server , with Apache or IIS installed to handle https routing for requests from the client app . These can be configured to work with a SAML2 Identity Provider to manage user authentication and authorization, such as Shibboleth or ADFS . Info Whether you use 2 or 3 servers, however, in general the deployment strategies are largely the same. For simplicity, in this guide we'll illustrate examples using a 3-tier architecture, but all steps are applicable to either deployment model unless stated otherwise. Tip Looking for a faster way to test Leaf out? Take a look at our Leaf Testing Guide for more information Next: Step 1 - Create the Leaf Application Databse","title":"Components"},{"location":"installation/installation_steps/1_app_db/","text":"1 - Create App Database \u00b6 Create a database to serve as the Leaf application database. This can be as simple as: CREATE DATABASE LeafDB Tip We also recommend also creating a Leaf-specific SQL service account and password for the API to use, though this isn't a requirement Populate the database tables , stored procedures , and functions using the LeafDB.Schema.sql script. Populate the initialization data using the LeafDB.Init.sql script. Grant your account permissions for the application database: /* If using a service account - Optional but Recommended! */ CREATE LOGIN < your_account > WITH PASSWORD = '<your_pass>' USE LeafDB GO CREATE USER < your_account > FOR LOGIN < your_account > GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: app TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: network TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: adm TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: auth TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: ref TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: rela TO < your_account > ; /* If on Windows */ GRANT ADMINISTER BULK OPERATIONS TO < your_account > ; /* Else if on Linux */ ALTER SERVER ROLE [ sysadmin ] ADD MEMBER < your_account > ; Populate the CMS General Equivalence Mapping (GEMs) data using the LeafDB.GEMs.sql script. These allow the Concept search box to suggest ICD10 -> ICD9 or ICD9 -> ICD10 equivalents if users search for a specific ICD10/9 code. Next: Step 2 - Configure App Server","title":"1 - Create App Database"},{"location":"installation/installation_steps/1_app_db/#1-create-app-database","text":"Create a database to serve as the Leaf application database. This can be as simple as: CREATE DATABASE LeafDB Tip We also recommend also creating a Leaf-specific SQL service account and password for the API to use, though this isn't a requirement Populate the database tables , stored procedures , and functions using the LeafDB.Schema.sql script. Populate the initialization data using the LeafDB.Init.sql script. Grant your account permissions for the application database: /* If using a service account - Optional but Recommended! */ CREATE LOGIN < your_account > WITH PASSWORD = '<your_pass>' USE LeafDB GO CREATE USER < your_account > FOR LOGIN < your_account > GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: app TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: network TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: adm TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: auth TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: ref TO < your_account > ; GRANT SELECT , UPDATE , INSERT , DELETE , EXEC ON SCHEMA :: rela TO < your_account > ; /* If on Windows */ GRANT ADMINISTER BULK OPERATIONS TO < your_account > ; /* Else if on Linux */ ALTER SERVER ROLE [ sysadmin ] ADD MEMBER < your_account > ; Populate the CMS General Equivalence Mapping (GEMs) data using the LeafDB.GEMs.sql script. These allow the Concept search box to suggest ICD10 -> ICD9 or ICD9 -> ICD10 equivalents if users search for a specific ICD10/9 code. Next: Step 2 - Configure App Server","title":"1 - Create App Database"},{"location":"installation/installation_steps/2_app_server/","text":"2 - Configure App Server \u00b6 The application server hosts the Leaf API , and serves as the intermediary between the client app and databases . The API is written in C# and .NET Core, and can run in either Linux or Windows environments. Warning The Leaf App database (created in Step 1 - Create App Database ) and Clinical database must be reachable from this server , so check to make sure any necessary firewall exceptions are in place We'll be using the following directory layout for organizing the API deployment: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Provided that you have a GitHub account and have setup your SSH key, start by creating the leafapi directory and downloading the source with git: $ mkdir /var/opt/leafapi/leaf_download $ cd /var/opt/leafapi/leaf_download $ git clone git@github.com:uwrit/leaf.git Prerequisites \u00b6 Linux (RHEL/CentOS) CentOS requires .NET to be installed prior to building the application. Refer to Microsoft's current instructions for installing .NET Core framework. https://docs.microsoft.com/en-us/dotnet/core/install/ . At the time of this writing, installing .NET on CentOS/RHEL looks like this: rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm yum install -y dotnet-sdk-6.0 Info For more information see https://docs.microsoft.com/en-us/dotnet/core/install/linux-centos . Prior to Leaf version 3.11.3, Leaf instead used dotnet core version 3.1. Linux (Ubuntu) .NET Core 6.0 can be installed on Ubuntu by running: wget https://packages.microsoft.com/config/ubuntu/20.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb sudo apt-get update ; \\ sudo apt-get install -y apt-transport-https && \\ sudo apt-get update && \\ sudo apt-get install -y dotnet-sdk-6.0 Info For more information see https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu . Prior to Leaf version 3.11.3, Leaf instead used dotnet core version 3.1. Windows Ensure that IIS8+ is installed on the intended app server alongside the ASP.NET Core Runtime 6.0 . Info See instructions at https://docs.microsoft.com/en-us/iis/get-started/whats-new-in-iis-8/installing-iis-8-on-windows-server-2012 . Prior to Leaf version 3.11.3, Leaf instead used dotnet core version 3.1. Next: Step 3 - Create a JWT Signing Key","title":"2 - Configure App Server"},{"location":"installation/installation_steps/2_app_server/#2-configure-app-server","text":"The application server hosts the Leaf API , and serves as the intermediary between the client app and databases . The API is written in C# and .NET Core, and can run in either Linux or Windows environments. Warning The Leaf App database (created in Step 1 - Create App Database ) and Clinical database must be reachable from this server , so check to make sure any necessary firewall exceptions are in place We'll be using the following directory layout for organizing the API deployment: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Provided that you have a GitHub account and have setup your SSH key, start by creating the leafapi directory and downloading the source with git: $ mkdir /var/opt/leafapi/leaf_download $ cd /var/opt/leafapi/leaf_download $ git clone git@github.com:uwrit/leaf.git","title":"2 - Configure App Server"},{"location":"installation/installation_steps/2_app_server/#prerequisites","text":"Linux (RHEL/CentOS) CentOS requires .NET to be installed prior to building the application. Refer to Microsoft's current instructions for installing .NET Core framework. https://docs.microsoft.com/en-us/dotnet/core/install/ . At the time of this writing, installing .NET on CentOS/RHEL looks like this: rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm yum install -y dotnet-sdk-6.0 Info For more information see https://docs.microsoft.com/en-us/dotnet/core/install/linux-centos . Prior to Leaf version 3.11.3, Leaf instead used dotnet core version 3.1. Linux (Ubuntu) .NET Core 6.0 can be installed on Ubuntu by running: wget https://packages.microsoft.com/config/ubuntu/20.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb sudo apt-get update ; \\ sudo apt-get install -y apt-transport-https && \\ sudo apt-get update && \\ sudo apt-get install -y dotnet-sdk-6.0 Info For more information see https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu . Prior to Leaf version 3.11.3, Leaf instead used dotnet core version 3.1. Windows Ensure that IIS8+ is installed on the intended app server alongside the ASP.NET Core Runtime 6.0 . Info See instructions at https://docs.microsoft.com/en-us/iis/get-started/whats-new-in-iis-8/installing-iis-8-on-windows-server-2012 . Prior to Leaf version 3.11.3, Leaf instead used dotnet core version 3.1. Next: Step 3 - Create a JWT Signing Key","title":"Prerequisites"},{"location":"installation/installation_steps/3_jwt/","text":"3 - Create a JWT Signing Key \u00b6 The Leaf client and server communicate by JSON Web Tokens, or JWTs (pronounced \"JAH-ts\"). In a terminal, start by creating a JWT signing key. This allows the JWT recipient to verify the sender is who they say they are. On the app server , run: $ mkdir /var/opt/leafapi/keys $ openssl req -nodes -x509 -newkey rsa:2048 -keyout /var/opt/leafapi/keys/key.pem \\ -out /var/opt/leafapi/keys/cert.pem -days 3650 -subj \\ \"/CN=urn:leaf:issuer:leaf.<your_institution>.<tld>\" $ openssl pkcs12 -in /var/opt/leafapi/keys/cert.pem -inkey key.pem \\ -export -out /var/opt/leafapi/keys/leaf.pfx -password pass:<your_pass> Note that the output paths and password can be whatever you'd like, and you'll need to reference them in the environment variables at a later step. Be sure that the key.pem file and path are readable by the (service) account which will be running the Leaf API At this point, your Leaf directory on the app server should look similar to this: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 | \u251c\u2500\u2500 cert.pem ########################## \u2502 \u2502 | \u251c\u2500\u2500 key.pem # Signing key & cert \u2502 \u2502 | \u251c\u2500\u2500 leaf.pfx ########################## \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Next: Step 4 - Compile the Leaf API","title":"3 - Create a JWT Signing Key"},{"location":"installation/installation_steps/3_jwt/#3-create-a-jwt-signing-key","text":"The Leaf client and server communicate by JSON Web Tokens, or JWTs (pronounced \"JAH-ts\"). In a terminal, start by creating a JWT signing key. This allows the JWT recipient to verify the sender is who they say they are. On the app server , run: $ mkdir /var/opt/leafapi/keys $ openssl req -nodes -x509 -newkey rsa:2048 -keyout /var/opt/leafapi/keys/key.pem \\ -out /var/opt/leafapi/keys/cert.pem -days 3650 -subj \\ \"/CN=urn:leaf:issuer:leaf.<your_institution>.<tld>\" $ openssl pkcs12 -in /var/opt/leafapi/keys/cert.pem -inkey key.pem \\ -export -out /var/opt/leafapi/keys/leaf.pfx -password pass:<your_pass> Note that the output paths and password can be whatever you'd like, and you'll need to reference them in the environment variables at a later step. Be sure that the key.pem file and path are readable by the (service) account which will be running the Leaf API At this point, your Leaf directory on the app server should look similar to this: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 | \u251c\u2500\u2500 cert.pem ########################## \u2502 \u2502 | \u251c\u2500\u2500 key.pem # Signing key & cert \u2502 \u2502 | \u251c\u2500\u2500 leaf.pfx ########################## \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Next: Step 4 - Compile the Leaf API","title":"3 - Create a JWT Signing Key"},{"location":"installation/installation_steps/4_compile_api/","text":"4 - Compile the Leaf API \u00b6 The Leaf API as available on GitHub is uncompiled, and must first be compiled in order to be used as a production deployment. Info Rather than compiling yourself, however, you may instead download the latest pre-compiled Leaf API from the Leaf Releases page on GitHub . If you download the pre-compiled version, skip ahead to 5 - Compile the Leaf UI . Compilation \u00b6 There are a variety of ways to build the API, as the dotnet CLI tool supports both self-contained builds as well as runtime dependent targets. Although .NET Core is cross-platform, some targets have quirks that should be noted. If you're curious, you can review the build.sh script in the project's root directory. Self-contained builds produce an executable and embed the entire .NET runtime in the build artifacts, resulting in a much larger deployment payload but removing the need to install the .NET Core runtime on your target machine. Conversely, runtime dependent builds assume that the .NET Core runtime will be installed on your target machine and only includes the application and its 3rd party dependencies in the artifact folder. From /leaf/src/server : Linux (RHEL/CentOS/Ubuntu) With User Authentication dotnet publish -c Release -o /var/opt/leafapi/api No Authentication (UNSECURED) dotnet publish -c Debug -o /var/opt/leafapi/api Windows With User Authentication dotnet publish -c Release -o <your_api_deployment_directory> No Authentication (UNSECURED) dotnet publish -c Debug -o <your_api_deployment_directory> For more information on the dotnet publish command see https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish Release vs. Debug compilation Besides running Leaf less efficiently and using additional memory, -c Debug allows Leaf to run in UNSECURED authentication and authorization mode in a deployment setting. We recommend being very careful about this and not using identified data in this case, as Leaf will assume all users to be administrators Wrapping up \u00b6 At this point, your Leaf directory on the app server should look similar to this: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u2502 \u251c\u2500\u2500 runtimes ######################## \u2502 \u2502 \u2502 \u251c\u2500\u2500 API.deps # \u2502 \u2502 \u2502 \u251c\u2500\u2500 API.dll # Production build files \u2502 \u2502 \u2502 \u251c\u2500\u2500 appsettings.json # \u2502 \u2502 \u2502 \u251c\u2500\u2500 ... ######################## \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files from GitHub \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Next: 5 - Build the Leaf UI","title":"4 - Compile the Leaf API"},{"location":"installation/installation_steps/4_compile_api/#4-compile-the-leaf-api","text":"The Leaf API as available on GitHub is uncompiled, and must first be compiled in order to be used as a production deployment. Info Rather than compiling yourself, however, you may instead download the latest pre-compiled Leaf API from the Leaf Releases page on GitHub . If you download the pre-compiled version, skip ahead to 5 - Compile the Leaf UI .","title":"4 - Compile the Leaf API"},{"location":"installation/installation_steps/4_compile_api/#compilation","text":"There are a variety of ways to build the API, as the dotnet CLI tool supports both self-contained builds as well as runtime dependent targets. Although .NET Core is cross-platform, some targets have quirks that should be noted. If you're curious, you can review the build.sh script in the project's root directory. Self-contained builds produce an executable and embed the entire .NET runtime in the build artifacts, resulting in a much larger deployment payload but removing the need to install the .NET Core runtime on your target machine. Conversely, runtime dependent builds assume that the .NET Core runtime will be installed on your target machine and only includes the application and its 3rd party dependencies in the artifact folder. From /leaf/src/server : Linux (RHEL/CentOS/Ubuntu) With User Authentication dotnet publish -c Release -o /var/opt/leafapi/api No Authentication (UNSECURED) dotnet publish -c Debug -o /var/opt/leafapi/api Windows With User Authentication dotnet publish -c Release -o <your_api_deployment_directory> No Authentication (UNSECURED) dotnet publish -c Debug -o <your_api_deployment_directory> For more information on the dotnet publish command see https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish Release vs. Debug compilation Besides running Leaf less efficiently and using additional memory, -c Debug allows Leaf to run in UNSECURED authentication and authorization mode in a deployment setting. We recommend being very careful about this and not using identified data in this case, as Leaf will assume all users to be administrators","title":"Compilation"},{"location":"installation/installation_steps/4_compile_api/#wrapping-up","text":"At this point, your Leaf directory on the app server should look similar to this: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u2502 \u251c\u2500\u2500 runtimes ######################## \u2502 \u2502 \u2502 \u251c\u2500\u2500 API.deps # \u2502 \u2502 \u2502 \u251c\u2500\u2500 API.dll # Production build files \u2502 \u2502 \u2502 \u251c\u2500\u2500 appsettings.json # \u2502 \u2502 \u2502 \u251c\u2500\u2500 ... ######################## \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files from GitHub \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Next: 5 - Build the Leaf UI","title":"Wrapping up"},{"location":"installation/installation_steps/5_compile_client/","text":"5 - Build the Leaf Client \u00b6 The Leaf client application is written in React and TypeScript using Node Package Manager (NPM) and Create React App , a bootstrapping library maintained by Facebook. Like the Leaf API, Leaf Client as available on GitHub is not yet built for production. Info As an alternative to compiling the client code yourself, you may also download the latest pre-built Leaf client from the Leaf Releases page on GitHub . If you download the pre-built version, you can skip ahead to 6 - Configure the appsettings file . Install dependencies $ cd /var/opt/leafapi/leaf_download/leaf/ $ cd src/ui-client/ $ npm install Build the client Next we need to build, which transpiles TypeScript and TSX/JSX to JavaScript, minifies the code, and outputs a bundle which we can point Apache or IIS to. To build, execute: $ npm run build This outputs a build bundle to a new src/ui-client/build/ folder. Make sure you are using NodeJS version 14.9.0+ and NPM version 6.14.8+ when building the Leaf client. See the troubleshooting page for more information Deploy build artifacts The final step is to copy the /build folder contents to a directory on the web server that Apache/IIS can serve to users. As we haven't configured Apache or IIS at this point, however, for now just take note of the location of the /build folder. For more information on building and deploying React apps, see the Create React App deployment page . Info In case you're wondering why we're building the Leaf client on the app server (rather than the web server), it's because we've downloaded the Leaf source code on the app server, so for now that's where we'll start. Later, if using a separate web server, we'll copy the production client build code to the web server. Wrapping up \u00b6 At this point, your Leaf directory on the app server should look similar to this: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files \u2502 \u2502 \u2502 \u251c\u2500\u2500 leaf \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ui-client \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 build # Built Client \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 static ######################### \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 images # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.html # Production Client files \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 manifest # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ... ######################### \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Next: 6 - Configure the appsettings file","title":"5 - Build the Leaf Client"},{"location":"installation/installation_steps/5_compile_client/#5-build-the-leaf-client","text":"The Leaf client application is written in React and TypeScript using Node Package Manager (NPM) and Create React App , a bootstrapping library maintained by Facebook. Like the Leaf API, Leaf Client as available on GitHub is not yet built for production. Info As an alternative to compiling the client code yourself, you may also download the latest pre-built Leaf client from the Leaf Releases page on GitHub . If you download the pre-built version, you can skip ahead to 6 - Configure the appsettings file . Install dependencies $ cd /var/opt/leafapi/leaf_download/leaf/ $ cd src/ui-client/ $ npm install Build the client Next we need to build, which transpiles TypeScript and TSX/JSX to JavaScript, minifies the code, and outputs a bundle which we can point Apache or IIS to. To build, execute: $ npm run build This outputs a build bundle to a new src/ui-client/build/ folder. Make sure you are using NodeJS version 14.9.0+ and NPM version 6.14.8+ when building the Leaf client. See the troubleshooting page for more information Deploy build artifacts The final step is to copy the /build folder contents to a directory on the web server that Apache/IIS can serve to users. As we haven't configured Apache or IIS at this point, however, for now just take note of the location of the /build folder. For more information on building and deploying React apps, see the Create React App deployment page . Info In case you're wondering why we're building the Leaf client on the app server (rather than the web server), it's because we've downloaded the Leaf source code on the app server, so for now that's where we'll start. Later, if using a separate web server, we'll copy the production client build code to the web server.","title":"5 - Build the Leaf Client"},{"location":"installation/installation_steps/5_compile_client/#wrapping-up","text":"At this point, your Leaf directory on the app server should look similar to this: var \u251c\u2500\u2500 opt \u2502 \u251c\u2500\u2500 leafapi \u2502 \u2502 \u251c\u2500\u2500 keys # JWT signing key \u2502 \u2502 \u251c\u2500\u2500 api # Compiled API \u2502 \u2502 \u251c\u2500\u2500 leaf_download # Downloaded source files \u2502 \u2502 \u2502 \u251c\u2500\u2500 leaf \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ui-client \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 build # Built Client \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 static ######################### \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 images # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.html # Production Client files \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 manifest # \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ... ######################### \u251c\u2500\u2500 log \u2502 \u251c\u2500\u2500 leaf # Log files Next: 6 - Configure the appsettings file","title":"Wrapping up"},{"location":"installation/installation_steps/6_appsettings/","text":"6 - Configure the appsettings file \u00b6 The appsettings.json file acts as the central configuration file for your Leaf instance. When the API is run, it begins by reading the appsettings.json file within the compiled API.dll directory to determine how to authenticate users, how to display the Leaf user interface, how to compile SQL statements, and more. In the Leaf source code this file can be found under src/server/API/ relative to the Leaf git repository root directory. As we already compiled the API in Step 4 , though, it can now be found and further customized at the top level of the API.dll directory. On the app server, edit the /var/opt/leafapi/api/appsettings.json file to suit your usage needs based on the parameters described below. Runtime \u00b6 Mode : FULL | GATEWAY - FULL mode is used in the vast majority of standard Leaf deployments. Use GATEWAY only in cases where this Leaf instance serves to query other federated Leaf instances, and has no clinical data of its own. Jwt \u00b6 SigningKey : LEAF_JWT_KEY - Name of the JWT signing key environment variable. Password : LEAF_JWT_KEY_PW - Name of the JWT signing key password environment variable. Certificate : LEAF_JWT_CERT - Name of the environment variable which points to the pem file. Issuer : Fully-qualified unique name for this Leaf instance (which issues authorized JWT tokens to users). This should match the /CN= valueused in Step 3 - Create a JWT Signing Key . We recomended using a pattern such as urn:leaf:issuer:leaf.<your_institution>.edu . Db \u00b6 App Connection : LEAF_APP_DB - Name of the Leaf app database connection string environment variable. DefaultTimeout : Number of seconds allowed before a Leaf app database query times out. Clin Connection : LEAF_CLIN_DB - Name of the clinical database connection string environment variable. If using Google BigQuery for RDBMS , this should be your BigQuery ProjectId , not a connection string. Leaf further assumes that you also have a GOOGLE_APPLICATION_CREDENTIALS environment variable and associated key.json file. See https://cloud.google.com/docs/authentication#getting_credentials_for_server-centric_flow for more information. DefaultTimeout : Number of seconds allowed before a clinical database query times out. RDBMS : MSSQL | MYSQL | MARIADB | POSTGRES | ORACLE | BIGQUERY - Relation Database Management System to use. Cohort : QueryStrategy : CTE | PARALLEL - CTE queries wrap individual Leaf panel SQL within a single larger CTE query, and leverage the SQL engine to find the intersect. PARALLEL queries are performed concurrently by the Leaf API, which then map/reduces the results to find the intersect. Given the following example query: Leaf would generate SQL similar to (formatted for readability): In general, we recommend using CTE , though if you are finding that one particularly expensive panel's query slows down or times out the entire CTE query, PARALLEL may be a good option. MaxParallelThreads : Maximum number of allowed concurrent queries to execute if the PARALLEL QueryStrategy . Defaults to 5 if this value is absent. Authentication \u00b6 Mechanism : SAML2 | UNSECURED - Only SAML2 is currently supported for production. Use UNSECURED for development. SessionTimeoutMinutes : Number of minutes allowed before a session expires. We recommend aligning this value with the timeout configuration other Service Provider used (e.g., Shibboleth). InactivityTimeoutMinutes : Number of minutes allowed before a lack of user activity logs a user out of Leaf. Logout Enabled : true | false - Indicates whether logout should be allowed or not (disabling is sometimes preferred if an explicit logout from a single-sign on system may also logout the user from other institutional apps as a side-effect). If false , the logout option will not appear in the Leaf user interface and the server will disallow API calls to do so. URI : The URI/URL Leaf will redirect to in the browser upon user logout. For Shibboleth, this is typically of the form https:<your_leaf_url>.edu/Shibboleth.sso/Logout?return=<Shibboleth_specific_logout_URL> SAML2 Headers ScopedIdentity : The SAML2 Attribute name which identifies a given user. Authorization \u00b6 Mechanism : SAML2 | APPDB | UNSECURED - Only SAML2 and APPDB are currently supported for production. Use UNSECURED for development. If SAML2 , Leaf will read the SAML2 headers and assign user roles based on groups supplied in SAML2.RolesMapping . If APPDB , Leaf will match authenticated user names to records in the auth.UserRole and auth.UserGroup Leaf AppDB tables. User permissions can be set using these tables. Example: AllowAllAuthenticatedUsers : true | false - Indicates whether the SAML2.RolesMapping.User group should be ignored, and any user who successfully authenticates should be treated as a Leaf user. SAML2 HeadersMapping Entitlements Name : The SAML2 Attribute name which identifies groups the user is in. Delimiter : The delimeter character which separates group names under Entitlements.Name . This is typically ; . RolesMapping User : User group from Entitlements.Name which the user must be a member of to be a Leaf user . Super : User group from Entitlements.Name which the user must be a member of to be a Leaf super user . Please note that this role is only a placeholder, and does not currently confer any additional functionality. Identified : User group from Entitlements.Name which the user must be a member of to see identified health information . Admin : User group from Entitlements.Name which the user must be a member of to be a Leaf administrator . Federated : User group from Entitlements.Name which the user must be a member of to be able to query other federated Leaf instances (if configured). Attestation \u00b6 Enabled : true | false - Indicates whether the login attestation screen should be shown in the user interface. SkipModeSelection : true | false - New in v3.11.3 . Set to true to skip directly to the attestation screen and avoid needing to select Quality Improvement vs. Research and so on. Defaults to false if omitted. Type : TEXT | HTML - Optional value used if using a custom attestation test . TEXT will caused the value Attestation.Text to be treated as plaintext, while HTML will be treated as HTML. Text : string[] - Optional value used if using a custom attestation test . Should be a string array. If Attestation.Type = TEXT , each element of the array will be treated as a paragraph. HTML usage example: Text usage example: The custom attestation will then be displayed to users: Credits - Optional Enabled : true | false - Whether or not to show custom text or images at the top of the attestation page. Logos : string[] - Optional An array of paths of custom images to be shown, relative to the Leaf web client path. Each image will be automatically resized to fit within the UI space at the top. Text : Optional text to be shown alongside logos. It's best to keep this short, such as 50 characters or less. Compiler \u00b6 Alias : @ - Unique character which Leaf will replace with a SQL Set alias when compiling SQL queries. FieldPersonId : SQL field that must be present on every SQL object Leaf will query which uniquely identifies patients in a clinical database. This is usually a value such as person_id , PATIENT_NUM , PAT_ID , etc. FieldEncounterId : SQL field that must be present on every SQL object Leaf will query with a one-to-many relationship to patients (i.e., a single patient can have multiple records). This field uniquely identifies encounters, and is usually a value such as visit_occurrence_id , ENCOUNTER_NUM , or EncounterId . Example configurations: OMOP \"Alias\" : \"@\" , \"FieldPersonId\" : \"person_id\" , \"FieldEncounterId\" : \"visit_occurrence_id\" , i2b2 \"Alias\" : \"@\" , \"FieldPersonId\" : \"PATIENT_NUM\" , \"FieldEncounterId\" : \"ENCOUNTER_NUM\" , Cohort \u00b6 RowLimit : Maximum allowed number of unique patients which Leaf will cache for a given query. If a user's query exceeds this number, Leaf will not generate Visualization or Patient List screen data. ExportLimit : Maximum allowed number of unique patients which Leaf will export to REDCap. Export \u00b6 REDCap Enabled : true | false - Value which indicates REDCap export is enabled. ApiURI : URI for the REDCap instance you wish to export to. This should be of the form: https://<your_redcap_instance>.org/api/ BatchSize : Number of rows per batch which Leaf will use to export data to REDCap. We recommend 10 . RowLimit : Maximum number of rows of data which Leaf will export to REDCap. Scope : Scoped value to add to the end of a user name when granting them ownership of a new REDCap project. For example, if user james007 is using Leaf and the Scope is mi6.uk.gov , Leaf will set the project owner as james007@mi6.uk.gov . IncludeScopeInUsername : By default, when Leaf concludes a REDCap export, it gives REDCap a project owner of the form: <current_leaf_username> + @ + <scope_defined_above> To use only <current_leaf_username> as the username, set this value to false . SuperToken : LEAF_REDCAP_SUPERTOKEN - Name of the REDCap Super Token environment variable. CSV Enabled : true | false - Value which indicates whether CSV export is enabled. Import \u00b6 REDCap Enabled : true | false - Value which indicates REDCap import is enabled. ApiURI : URI for the REDCap instance you wish to import from. This should be of the form: https://<your_redcap_instance>.org/api/ BatchSize : Number of rows per batch which Leaf will use to import into the Leaf app database from REDCap. We recommend 1000 . Deidentification \u00b6 Patient Enabled : true | false - Value which indicates whether patient-level de-identification is enabled. Dateshifting Increment : MINUTE | HOUR | DAY - Value which indicates the temporal unit by which to shift patient time values. LowerBound : Numeric value which indicates the minimum number of Increment which Leaf should randomly shift a date (eg -365 ). UpperBound : Numeric value which indicates the maximum number of Increment which Leaf should randomly shift a date (eg 200 ). Cohort Enabled : true | false - Value which indicates whether cohort-level de-identification is enabled. Noise : Enabled : true | false - Value which indicates whether \"Noise\" should be randomly added to user queries to obfuscate true cohort counts. LowerBound : Numeric value which indicates the minimum number of patients which Leaf should randomly shift a cohort count. UpperBound : Numeric value which indicates the maximum number of patients which Leaf should randomly shift a cohort count. LowCellMasking : Enabled : true | false - Value which indicates whether cohort counts below a Threshold should be masked to make the true value unclear to the user. Threshold : Numeric value at or below which the true cohort count will not be shown to the user. Client \u00b6 Map Enabled : true | false - Boolean which indicates whether the Map screen should be shown in the user interface. TileURI : URI for the tile layer from which to request dynamic images and generate maps for, such as https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png . Leaf uses Leaflet.js and React-Leaflet for map generation. A list of Leaflet tile layer providers can be found at https://leaflet-extras.github.io/leaflet-providers/preview/ . Visualize Enabled : true | false - Boolean which indicates whether the Visualize screen should be shown in the user interface. ShowFederated : true | false - Value which indicates whether the Visualize results for federated Leaf instances should be shown in the user interface. If false , only aggregate results from all Leaf instances will be shown. Timelines Enabled : true | false - Boolean which indicates whether the Timelines screen should be shown in the user interface. PatientList Enabled : true | false - Boolean which indicates whether the Patient List screen should be shown in the user interface. Help Enabled : true | false - Boolean which indicates whether the Help box should be shown in the lower left of the user interface. Email : An email address to direct users to, suc has <your_support_email>.edu . If blank, \"Contact a Leaf administrator\" will not be shown. URI : A URI/URL to direct users to, such as https://<your_support_page> . If blank, \"Learn more here\" will not be shown. Notification \u00b6 Enabled : true | false - Boolean which indicates whether notification to administrators by email is enabled. Email Server : SMTP server address from which to send emails from, such as my.server.edu . UseSSL : true | false - Value which indicates whether SSL should be used for sending emails. Sender Address : Email address auto-generated emails to administrators should be sent from . Receiver Address : Email address auto-generated emails should be sent to , such as an admin list-serv. Credentials Username : LEAF_SMTP_USR - Name of the SMTP user name environment variable. Password : LEAF_SMTP_PW - Name of the SMTP user password environment variable. Next: Step 7 - Set Environment Variables","title":"6 - Configure the appsettings file"},{"location":"installation/installation_steps/6_appsettings/#6-configure-the-appsettings-file","text":"The appsettings.json file acts as the central configuration file for your Leaf instance. When the API is run, it begins by reading the appsettings.json file within the compiled API.dll directory to determine how to authenticate users, how to display the Leaf user interface, how to compile SQL statements, and more. In the Leaf source code this file can be found under src/server/API/ relative to the Leaf git repository root directory. As we already compiled the API in Step 4 , though, it can now be found and further customized at the top level of the API.dll directory. On the app server, edit the /var/opt/leafapi/api/appsettings.json file to suit your usage needs based on the parameters described below.","title":"6 - Configure the appsettings file"},{"location":"installation/installation_steps/6_appsettings/#runtime","text":"Mode : FULL | GATEWAY - FULL mode is used in the vast majority of standard Leaf deployments. Use GATEWAY only in cases where this Leaf instance serves to query other federated Leaf instances, and has no clinical data of its own.","title":"Runtime"},{"location":"installation/installation_steps/6_appsettings/#jwt","text":"SigningKey : LEAF_JWT_KEY - Name of the JWT signing key environment variable. Password : LEAF_JWT_KEY_PW - Name of the JWT signing key password environment variable. Certificate : LEAF_JWT_CERT - Name of the environment variable which points to the pem file. Issuer : Fully-qualified unique name for this Leaf instance (which issues authorized JWT tokens to users). This should match the /CN= valueused in Step 3 - Create a JWT Signing Key . We recomended using a pattern such as urn:leaf:issuer:leaf.<your_institution>.edu .","title":"Jwt"},{"location":"installation/installation_steps/6_appsettings/#db","text":"App Connection : LEAF_APP_DB - Name of the Leaf app database connection string environment variable. DefaultTimeout : Number of seconds allowed before a Leaf app database query times out. Clin Connection : LEAF_CLIN_DB - Name of the clinical database connection string environment variable. If using Google BigQuery for RDBMS , this should be your BigQuery ProjectId , not a connection string. Leaf further assumes that you also have a GOOGLE_APPLICATION_CREDENTIALS environment variable and associated key.json file. See https://cloud.google.com/docs/authentication#getting_credentials_for_server-centric_flow for more information. DefaultTimeout : Number of seconds allowed before a clinical database query times out. RDBMS : MSSQL | MYSQL | MARIADB | POSTGRES | ORACLE | BIGQUERY - Relation Database Management System to use. Cohort : QueryStrategy : CTE | PARALLEL - CTE queries wrap individual Leaf panel SQL within a single larger CTE query, and leverage the SQL engine to find the intersect. PARALLEL queries are performed concurrently by the Leaf API, which then map/reduces the results to find the intersect. Given the following example query: Leaf would generate SQL similar to (formatted for readability): In general, we recommend using CTE , though if you are finding that one particularly expensive panel's query slows down or times out the entire CTE query, PARALLEL may be a good option. MaxParallelThreads : Maximum number of allowed concurrent queries to execute if the PARALLEL QueryStrategy . Defaults to 5 if this value is absent.","title":"Db"},{"location":"installation/installation_steps/6_appsettings/#authentication","text":"Mechanism : SAML2 | UNSECURED - Only SAML2 is currently supported for production. Use UNSECURED for development. SessionTimeoutMinutes : Number of minutes allowed before a session expires. We recommend aligning this value with the timeout configuration other Service Provider used (e.g., Shibboleth). InactivityTimeoutMinutes : Number of minutes allowed before a lack of user activity logs a user out of Leaf. Logout Enabled : true | false - Indicates whether logout should be allowed or not (disabling is sometimes preferred if an explicit logout from a single-sign on system may also logout the user from other institutional apps as a side-effect). If false , the logout option will not appear in the Leaf user interface and the server will disallow API calls to do so. URI : The URI/URL Leaf will redirect to in the browser upon user logout. For Shibboleth, this is typically of the form https:<your_leaf_url>.edu/Shibboleth.sso/Logout?return=<Shibboleth_specific_logout_URL> SAML2 Headers ScopedIdentity : The SAML2 Attribute name which identifies a given user.","title":"Authentication"},{"location":"installation/installation_steps/6_appsettings/#authorization","text":"Mechanism : SAML2 | APPDB | UNSECURED - Only SAML2 and APPDB are currently supported for production. Use UNSECURED for development. If SAML2 , Leaf will read the SAML2 headers and assign user roles based on groups supplied in SAML2.RolesMapping . If APPDB , Leaf will match authenticated user names to records in the auth.UserRole and auth.UserGroup Leaf AppDB tables. User permissions can be set using these tables. Example: AllowAllAuthenticatedUsers : true | false - Indicates whether the SAML2.RolesMapping.User group should be ignored, and any user who successfully authenticates should be treated as a Leaf user. SAML2 HeadersMapping Entitlements Name : The SAML2 Attribute name which identifies groups the user is in. Delimiter : The delimeter character which separates group names under Entitlements.Name . This is typically ; . RolesMapping User : User group from Entitlements.Name which the user must be a member of to be a Leaf user . Super : User group from Entitlements.Name which the user must be a member of to be a Leaf super user . Please note that this role is only a placeholder, and does not currently confer any additional functionality. Identified : User group from Entitlements.Name which the user must be a member of to see identified health information . Admin : User group from Entitlements.Name which the user must be a member of to be a Leaf administrator . Federated : User group from Entitlements.Name which the user must be a member of to be able to query other federated Leaf instances (if configured).","title":"Authorization"},{"location":"installation/installation_steps/6_appsettings/#attestation","text":"Enabled : true | false - Indicates whether the login attestation screen should be shown in the user interface. SkipModeSelection : true | false - New in v3.11.3 . Set to true to skip directly to the attestation screen and avoid needing to select Quality Improvement vs. Research and so on. Defaults to false if omitted. Type : TEXT | HTML - Optional value used if using a custom attestation test . TEXT will caused the value Attestation.Text to be treated as plaintext, while HTML will be treated as HTML. Text : string[] - Optional value used if using a custom attestation test . Should be a string array. If Attestation.Type = TEXT , each element of the array will be treated as a paragraph. HTML usage example: Text usage example: The custom attestation will then be displayed to users: Credits - Optional Enabled : true | false - Whether or not to show custom text or images at the top of the attestation page. Logos : string[] - Optional An array of paths of custom images to be shown, relative to the Leaf web client path. Each image will be automatically resized to fit within the UI space at the top. Text : Optional text to be shown alongside logos. It's best to keep this short, such as 50 characters or less.","title":"Attestation"},{"location":"installation/installation_steps/6_appsettings/#compiler","text":"Alias : @ - Unique character which Leaf will replace with a SQL Set alias when compiling SQL queries. FieldPersonId : SQL field that must be present on every SQL object Leaf will query which uniquely identifies patients in a clinical database. This is usually a value such as person_id , PATIENT_NUM , PAT_ID , etc. FieldEncounterId : SQL field that must be present on every SQL object Leaf will query with a one-to-many relationship to patients (i.e., a single patient can have multiple records). This field uniquely identifies encounters, and is usually a value such as visit_occurrence_id , ENCOUNTER_NUM , or EncounterId . Example configurations: OMOP \"Alias\" : \"@\" , \"FieldPersonId\" : \"person_id\" , \"FieldEncounterId\" : \"visit_occurrence_id\" , i2b2 \"Alias\" : \"@\" , \"FieldPersonId\" : \"PATIENT_NUM\" , \"FieldEncounterId\" : \"ENCOUNTER_NUM\" ,","title":"Compiler"},{"location":"installation/installation_steps/6_appsettings/#cohort","text":"RowLimit : Maximum allowed number of unique patients which Leaf will cache for a given query. If a user's query exceeds this number, Leaf will not generate Visualization or Patient List screen data. ExportLimit : Maximum allowed number of unique patients which Leaf will export to REDCap.","title":"Cohort"},{"location":"installation/installation_steps/6_appsettings/#export","text":"REDCap Enabled : true | false - Value which indicates REDCap export is enabled. ApiURI : URI for the REDCap instance you wish to export to. This should be of the form: https://<your_redcap_instance>.org/api/ BatchSize : Number of rows per batch which Leaf will use to export data to REDCap. We recommend 10 . RowLimit : Maximum number of rows of data which Leaf will export to REDCap. Scope : Scoped value to add to the end of a user name when granting them ownership of a new REDCap project. For example, if user james007 is using Leaf and the Scope is mi6.uk.gov , Leaf will set the project owner as james007@mi6.uk.gov . IncludeScopeInUsername : By default, when Leaf concludes a REDCap export, it gives REDCap a project owner of the form: <current_leaf_username> + @ + <scope_defined_above> To use only <current_leaf_username> as the username, set this value to false . SuperToken : LEAF_REDCAP_SUPERTOKEN - Name of the REDCap Super Token environment variable. CSV Enabled : true | false - Value which indicates whether CSV export is enabled.","title":"Export"},{"location":"installation/installation_steps/6_appsettings/#import","text":"REDCap Enabled : true | false - Value which indicates REDCap import is enabled. ApiURI : URI for the REDCap instance you wish to import from. This should be of the form: https://<your_redcap_instance>.org/api/ BatchSize : Number of rows per batch which Leaf will use to import into the Leaf app database from REDCap. We recommend 1000 .","title":"Import"},{"location":"installation/installation_steps/6_appsettings/#deidentification","text":"Patient Enabled : true | false - Value which indicates whether patient-level de-identification is enabled. Dateshifting Increment : MINUTE | HOUR | DAY - Value which indicates the temporal unit by which to shift patient time values. LowerBound : Numeric value which indicates the minimum number of Increment which Leaf should randomly shift a date (eg -365 ). UpperBound : Numeric value which indicates the maximum number of Increment which Leaf should randomly shift a date (eg 200 ). Cohort Enabled : true | false - Value which indicates whether cohort-level de-identification is enabled. Noise : Enabled : true | false - Value which indicates whether \"Noise\" should be randomly added to user queries to obfuscate true cohort counts. LowerBound : Numeric value which indicates the minimum number of patients which Leaf should randomly shift a cohort count. UpperBound : Numeric value which indicates the maximum number of patients which Leaf should randomly shift a cohort count. LowCellMasking : Enabled : true | false - Value which indicates whether cohort counts below a Threshold should be masked to make the true value unclear to the user. Threshold : Numeric value at or below which the true cohort count will not be shown to the user.","title":"Deidentification"},{"location":"installation/installation_steps/6_appsettings/#client","text":"Map Enabled : true | false - Boolean which indicates whether the Map screen should be shown in the user interface. TileURI : URI for the tile layer from which to request dynamic images and generate maps for, such as https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png . Leaf uses Leaflet.js and React-Leaflet for map generation. A list of Leaflet tile layer providers can be found at https://leaflet-extras.github.io/leaflet-providers/preview/ . Visualize Enabled : true | false - Boolean which indicates whether the Visualize screen should be shown in the user interface. ShowFederated : true | false - Value which indicates whether the Visualize results for federated Leaf instances should be shown in the user interface. If false , only aggregate results from all Leaf instances will be shown. Timelines Enabled : true | false - Boolean which indicates whether the Timelines screen should be shown in the user interface. PatientList Enabled : true | false - Boolean which indicates whether the Patient List screen should be shown in the user interface. Help Enabled : true | false - Boolean which indicates whether the Help box should be shown in the lower left of the user interface. Email : An email address to direct users to, suc has <your_support_email>.edu . If blank, \"Contact a Leaf administrator\" will not be shown. URI : A URI/URL to direct users to, such as https://<your_support_page> . If blank, \"Learn more here\" will not be shown.","title":"Client"},{"location":"installation/installation_steps/6_appsettings/#notification","text":"Enabled : true | false - Boolean which indicates whether notification to administrators by email is enabled. Email Server : SMTP server address from which to send emails from, such as my.server.edu . UseSSL : true | false - Value which indicates whether SSL should be used for sending emails. Sender Address : Email address auto-generated emails to administrators should be sent from . Receiver Address : Email address auto-generated emails should be sent to , such as an admin list-serv. Credentials Username : LEAF_SMTP_USR - Name of the SMTP user name environment variable. Password : LEAF_SMTP_PW - Name of the SMTP user password environment variable. Next: Step 7 - Set Environment Variables","title":"Notification"},{"location":"installation/installation_steps/7_env/","text":"7 - Set Environment Variables \u00b6 Leaf uses environment variables to store sensitive information, such as connection strings, which are loaded when the API is launched. Regardless of the OS and configuration, as a best practice we recommend using environment variables specific to the user account running the Leaf API (rather than global environment variables). Leaf environment variables with example values : # Required LEAF_JWT_CERT = / var / opt / leafapi /. keys / cert . pem LEAF_JWT_KEY = / var / opt / leafapi /. keys / leaf . pfx LEAF_JWT_KEY_PW = < your_pass > LEAF_APP_DB = < leaf_app_db_connection_string > LEAF_CLIN_DB = < clinical_db_connection_string > SERILOG_DIR = / var / log / leaf / ASPNETCORE_URLS = http : // 0.0.0.0 : 5001 # Only if using Linux # Optional LEAF_REDCAP_SUPERTOKEN = < your_token > # Only if using REDCap import/export LEAF_SMTP_USR = < smtp_user > # Only if auto-generating help emails LEAF_SMTP_PW = < smtp_password > # Only if auto-generating help emails GOOGLE_APPLICATION_CREDENTIALS # Only if using Google BigQuery SQL Connection string formatting In most cases, the LEAF_APP_DB and LEAF_CLIN_DB environment variables should be similar to: Server=<server>;Database=<dbname>;uid=sa;Password=<dbpassword>; Though the particulars will depend on your database vendor. If you are using BigQuery, the LEAF_CLIN_DB variable should instead be your BigQuery ProjectId . Linux (RHEL/CentOS/Ubuntu) If using Linux we recommend: Using full paths when referencing locations on the filesystem. Storing environment variables in a .conf file. Windows In IIS environment variables are typically defined as configuration items in your backing application in IIS itself: As IIS deployment is handled in Step 8b - Configure IIS with Leaf , you can wait to set environment variables until IIS configuration is complete. The next step will depend on whether you are using Apache or IIS for deploying Leaf: Step 8a - Configure Apache with Leaf , or Step 8b - Configure IIS with Leaf","title":"7 - Set Environment Variables"},{"location":"installation/installation_steps/7_env/#7-set-environment-variables","text":"Leaf uses environment variables to store sensitive information, such as connection strings, which are loaded when the API is launched. Regardless of the OS and configuration, as a best practice we recommend using environment variables specific to the user account running the Leaf API (rather than global environment variables). Leaf environment variables with example values : # Required LEAF_JWT_CERT = / var / opt / leafapi /. keys / cert . pem LEAF_JWT_KEY = / var / opt / leafapi /. keys / leaf . pfx LEAF_JWT_KEY_PW = < your_pass > LEAF_APP_DB = < leaf_app_db_connection_string > LEAF_CLIN_DB = < clinical_db_connection_string > SERILOG_DIR = / var / log / leaf / ASPNETCORE_URLS = http : // 0.0.0.0 : 5001 # Only if using Linux # Optional LEAF_REDCAP_SUPERTOKEN = < your_token > # Only if using REDCap import/export LEAF_SMTP_USR = < smtp_user > # Only if auto-generating help emails LEAF_SMTP_PW = < smtp_password > # Only if auto-generating help emails GOOGLE_APPLICATION_CREDENTIALS # Only if using Google BigQuery SQL Connection string formatting In most cases, the LEAF_APP_DB and LEAF_CLIN_DB environment variables should be similar to: Server=<server>;Database=<dbname>;uid=sa;Password=<dbpassword>; Though the particulars will depend on your database vendor. If you are using BigQuery, the LEAF_CLIN_DB variable should instead be your BigQuery ProjectId . Linux (RHEL/CentOS/Ubuntu) If using Linux we recommend: Using full paths when referencing locations on the filesystem. Storing environment variables in a .conf file. Windows In IIS environment variables are typically defined as configuration items in your backing application in IIS itself: As IIS deployment is handled in Step 8b - Configure IIS with Leaf , you can wait to set environment variables until IIS configuration is complete. The next step will depend on whether you are using Apache or IIS for deploying Leaf: Step 8a - Configure Apache with Leaf , or Step 8b - Configure IIS with Leaf","title":"7 - Set Environment Variables"},{"location":"installation/installation_steps/8a_configure_apache/","text":"8a - Configure Leaf with Apache \u00b6 In general, Leaf works quite well when deployed with Apache. In this section, we'll: Deploy the Leaf API on the app server. Host the Leaf client using Apache on the web server. Deploying the API as a Service \u00b6 We'll start by deploying the Leaf API as a service using systemctl . Once built, the API service should be run with a service account that is not an administrative user The API host firewall will need to allow inbound communication on the chosen port to the Apache web server On the app server : Create a nologin user account to isolate the service from the operating system, and give that account ownership over the API -related folders. useradd -r api_svc_account mkdir /var/log/leaf/ chown api_svc_account /var/log/leaf/ chown -R api_svc_account /var/opt/leafapi/ Create a service file for the API instance. The WorkingDirectory must be the directory where API.dll resides. /var/opt/leafapi/services/leaf_api.service [Unit] Description=Leaf API Service [Service] EnvironmentFile=/var/opt/leafapi/services/leaf_api.service.conf User=api_svc_account Type=idle TimeoutStartSec=300 TimeoutStopSec=30 WorkingDirectory=/var/opt/leafapi/api/ ExecStart=/usr/bin/dotnet API.dll [Install] WantedBy=multi-user.target Last, link your service file with systemd and make it aware of the service: # Create a symbolic link into the systemd directory ln -s /var/opt/leafapi/services/leaf_api.service /etc/systemd/system/leaf_api.service # Make the systemd aware of the service systemctl daemon-reload # Start the service systemctl start leaf_api.service Hosting Leaf with Apache \u00b6 Great, at this point the Leaf database and API should be up and running. The status of the Leaf API can be checked with this command: ```sh systemctl status leaf_api.service ``` From the app server , copy the /build directory made in Step 5 - Build the Leaf UI to /data/www/ on the web server . This will copy the Leaf Client production files over for Apache to host. On the web server , define an httpd.conf file to host a single node in a Leaf deployment. Info Each Leaf client webapp must be hosted at the top level of the DocumentRoot of an Apache VirtualHost. Multiple nodes could be hosted on a single Apache instance pointing at that same DocumentRoot , however each would need its own VirtualHost and unique DNS name defined (e.g., site1.leaf.school.edu, site2.leaf.school.edu). In the below example, the Shibboleth module is used to authenticate users via SAML2 and provide group membership to the app. If you want to define your own set of groups that limit access to the app via Apache (i.e. during pre-release or evaluation), you can define your own Apache groups via the AuthGroupFile directive and then require those groups. httpd.conf <VirtualHost *:443 > ServerName leaf.{subdomain}.{domain}.{tld} ServerAlias leaf DocumentRoot /data/www/build HostnameLookups Off ErrorLog logs/leaf_ssl_error_log CustomLog logs/leaf_ssl_access_log combinedio SSLEngine on SSLProtocol all -SSLv2 -SSLv3 SSLHonorCipherOrder on SSLCipherSuite HIGH:!aNULL:!MD5:!AECDH:!ADH SSLCertificateFile /etc/pki/tls/certs/{leaf-cert}.cert SSLCertificateKeyFile /etc/pki/tls/private/{leaf-key}.key SSLCertificateChainFile /etc/pki/tls/certs/{cert-chain}.cert SetEnvIf User-Agent \".*MSIE.*\" \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 <Files *.sso > SetHandler shib-handler </Files> <Location /> <RequireAny> # Optional subnet restriction Require ip {restricted-subnet} # Authentication provider Setup AuthType shibboleth ShibRequireSession On ShibUseHeaders On Require shibboleth # optional users restriction, although this only determines access to the app, not a user's underlying authorization within the app # cat /data/leaf/users.conf --> leafusers: eppns... AuthGroupFile /data/leaf/users.conf require group leafusers </RequireAny> </Location> # API proxy directive, overall api doesn't require user session <Location /api > ProxyPass http://{node1-ip}:{node1-port}/api ProxyPassReverse http://{node1-ip}:{node1-port}/api <RequireAny> AuthType shibboleth ShibRequireSession Off Require shibboleth </RequireAny> </Location> # /api/user does require user session <Location /api/user > <RequireAny> AuthType shibboleth ShibRequireSession On Require shibboleth </RequireAny> </Location> </VirtualHost> SELinux and Apache \u00b6 If you have SELinux enabled on your system, you need to be aware of an additional set of controls specifically related to running Apache. By default with SELinux enabled httpd connections to other apps not located on localhost are regulated. If your API server is located on another host you will need to enable httpd to make outbound connections. To enable httpd connections to non-standard ports: $ setsebool -P httpd_can_network_connect on Depending on which ports you use for your API service you may need enable other booleans (ie httpd_can_network_connect_db, httpd_use_openstack). To see the complete list of variables on your system and their present status: $ getsebool -a | grep httpd If you decide to use non-standard directory to host your webapp you will also need to re-label the files in that directory so that httpd can properly access the webapp files. Using the location in the example above: $ semanage fcontext -a -t httpd_sys_content_t \"/data/www(/.*)?\" $ restorecon -R -v /data/www Next: Step 9 - Configure Authentication with SAML2","title":"8a - Configure Leaf with Apache"},{"location":"installation/installation_steps/8a_configure_apache/#8a-configure-leaf-with-apache","text":"In general, Leaf works quite well when deployed with Apache. In this section, we'll: Deploy the Leaf API on the app server. Host the Leaf client using Apache on the web server.","title":"8a - Configure Leaf with Apache"},{"location":"installation/installation_steps/8a_configure_apache/#deploying-the-api-as-a-service","text":"We'll start by deploying the Leaf API as a service using systemctl . Once built, the API service should be run with a service account that is not an administrative user The API host firewall will need to allow inbound communication on the chosen port to the Apache web server On the app server : Create a nologin user account to isolate the service from the operating system, and give that account ownership over the API -related folders. useradd -r api_svc_account mkdir /var/log/leaf/ chown api_svc_account /var/log/leaf/ chown -R api_svc_account /var/opt/leafapi/ Create a service file for the API instance. The WorkingDirectory must be the directory where API.dll resides. /var/opt/leafapi/services/leaf_api.service [Unit] Description=Leaf API Service [Service] EnvironmentFile=/var/opt/leafapi/services/leaf_api.service.conf User=api_svc_account Type=idle TimeoutStartSec=300 TimeoutStopSec=30 WorkingDirectory=/var/opt/leafapi/api/ ExecStart=/usr/bin/dotnet API.dll [Install] WantedBy=multi-user.target Last, link your service file with systemd and make it aware of the service: # Create a symbolic link into the systemd directory ln -s /var/opt/leafapi/services/leaf_api.service /etc/systemd/system/leaf_api.service # Make the systemd aware of the service systemctl daemon-reload # Start the service systemctl start leaf_api.service","title":"Deploying the API as a Service"},{"location":"installation/installation_steps/8a_configure_apache/#hosting-leaf-with-apache","text":"Great, at this point the Leaf database and API should be up and running. The status of the Leaf API can be checked with this command: ```sh systemctl status leaf_api.service ``` From the app server , copy the /build directory made in Step 5 - Build the Leaf UI to /data/www/ on the web server . This will copy the Leaf Client production files over for Apache to host. On the web server , define an httpd.conf file to host a single node in a Leaf deployment. Info Each Leaf client webapp must be hosted at the top level of the DocumentRoot of an Apache VirtualHost. Multiple nodes could be hosted on a single Apache instance pointing at that same DocumentRoot , however each would need its own VirtualHost and unique DNS name defined (e.g., site1.leaf.school.edu, site2.leaf.school.edu). In the below example, the Shibboleth module is used to authenticate users via SAML2 and provide group membership to the app. If you want to define your own set of groups that limit access to the app via Apache (i.e. during pre-release or evaluation), you can define your own Apache groups via the AuthGroupFile directive and then require those groups. httpd.conf <VirtualHost *:443 > ServerName leaf.{subdomain}.{domain}.{tld} ServerAlias leaf DocumentRoot /data/www/build HostnameLookups Off ErrorLog logs/leaf_ssl_error_log CustomLog logs/leaf_ssl_access_log combinedio SSLEngine on SSLProtocol all -SSLv2 -SSLv3 SSLHonorCipherOrder on SSLCipherSuite HIGH:!aNULL:!MD5:!AECDH:!ADH SSLCertificateFile /etc/pki/tls/certs/{leaf-cert}.cert SSLCertificateKeyFile /etc/pki/tls/private/{leaf-key}.key SSLCertificateChainFile /etc/pki/tls/certs/{cert-chain}.cert SetEnvIf User-Agent \".*MSIE.*\" \\ nokeepalive ssl-unclean-shutdown \\ downgrade-1.0 force-response-1.0 <Files *.sso > SetHandler shib-handler </Files> <Location /> <RequireAny> # Optional subnet restriction Require ip {restricted-subnet} # Authentication provider Setup AuthType shibboleth ShibRequireSession On ShibUseHeaders On Require shibboleth # optional users restriction, although this only determines access to the app, not a user's underlying authorization within the app # cat /data/leaf/users.conf --> leafusers: eppns... AuthGroupFile /data/leaf/users.conf require group leafusers </RequireAny> </Location> # API proxy directive, overall api doesn't require user session <Location /api > ProxyPass http://{node1-ip}:{node1-port}/api ProxyPassReverse http://{node1-ip}:{node1-port}/api <RequireAny> AuthType shibboleth ShibRequireSession Off Require shibboleth </RequireAny> </Location> # /api/user does require user session <Location /api/user > <RequireAny> AuthType shibboleth ShibRequireSession On Require shibboleth </RequireAny> </Location> </VirtualHost>","title":"Hosting Leaf with Apache"},{"location":"installation/installation_steps/8a_configure_apache/#selinux-and-apache","text":"If you have SELinux enabled on your system, you need to be aware of an additional set of controls specifically related to running Apache. By default with SELinux enabled httpd connections to other apps not located on localhost are regulated. If your API server is located on another host you will need to enable httpd to make outbound connections. To enable httpd connections to non-standard ports: $ setsebool -P httpd_can_network_connect on Depending on which ports you use for your API service you may need enable other booleans (ie httpd_can_network_connect_db, httpd_use_openstack). To see the complete list of variables on your system and their present status: $ getsebool -a | grep httpd If you decide to use non-standard directory to host your webapp you will also need to re-label the files in that directory so that httpd can properly access the webapp files. Using the location in the example above: $ semanage fcontext -a -t httpd_sys_content_t \"/data/www(/.*)?\" $ restorecon -R -v /data/www Next: Step 9 - Configure Authentication with SAML2","title":"SELinux and Apache"},{"location":"installation/installation_steps/8b_configure_iis/","text":"8b - Configure Leaf with IIS \u00b6 The following IIS guide assumes you are using a combined web & app single server to both host the Leaf API and handle user traffic. On the web/app server : Install the .NET Core Hosting Bundle Install IIS URL Rewrite Install Shibboleth Service Provider 3 Be sure to check Configure IIS7 Module box during installation. Create an Application pool to run the site and API. Create a service account for IIS to run the application as. Info In this walkthrough we use sv_uw_leaf_service but use whatever naming convention is appropriate for your environment Add Write permissions for the service account to your logging directory (where the SERILOG_DIR environment variable is pointing to; this example uses F:\\leaf ) Warning This step is critical, as if IIS is unable to write log activity, you'll also be unable to understand errors or other issues the API encounters ! In the new Application Pool's Advanced Settings , set Identity to the service account created in (6) Load User Profile to True Create the website to host the Leaf browser application. Create an application behind the site to host the API. Do NOT name the API application 'api' , as this will cause the rewrite rule to apply recursively until the request fails. At UW we name the backing application 'leafapi' In the Configuration Editor , under Section : system.webServer/aspNetCore set arguments -> .\\API.dll processPath -> dotnet Create a URL rewrite rule on the site with the following template. Be sure the Append query string box is checked. If not, API calls for Concept search will fail Your web.config should now look like this: <system.webServer> ... <rewrite> <rules> <rule name= \"add {applicationName}\" > <match url= \"^(api/.*)\" /> <action type= \"Rewrite\" url= \"{applicationName}/{R:0}\" appendQueryString= \"true\" logRewrittenUrl= \"true\" /> </rule> </rules> </rewrite> </system.webServer> If the WebDAV module is installed in your IIS instance, you need to either uninstall it or disable it for this site. It inteferes with PUT/DELETE HTTP verbs. <system.webServer> ... <modules runAllManagedModulesForAllRequests= \"true\" > <remove name= \"WebDAVModule\" /> </modules> </system.webServer> If you have not yet created the environment variables for IIS (as described in Step 7 - Set Environment Variables ), do so now. Warning Before moving on, we strongly recommend checking that the Leaf API starts appropriately and can log correctly. If you skip ahead and check the Leaf client and get an error, the error may simply be symptomatic of the API not running. To check the API, start the Application Pool , then: Confirm that you can see an output log file in your SERILOG_DIR directory - If so, the first line should read something like {\"Timestamp\":\"...\", \"Level\":\"Information\",\"MessageTemplate\":\"Starting Leaf's API v{Version}...\" If no log files appear : Make absolutely sure your service account is running in IIS and has permissions to write to the SERILOG_DIR directory. Check the Windows Event Viewer application for possible errors: If log files appear but show an error such as SqlException... Check that the values in your LEAF_APP_DB environment variable connection string are correct, such as username and password. Check that your service account has appropriate privileges to your app database . Next: Step 9 - Configure Authentication with SAML2","title":"8b - Configure Leaf with IIS"},{"location":"installation/installation_steps/8b_configure_iis/#8b-configure-leaf-with-iis","text":"The following IIS guide assumes you are using a combined web & app single server to both host the Leaf API and handle user traffic. On the web/app server : Install the .NET Core Hosting Bundle Install IIS URL Rewrite Install Shibboleth Service Provider 3 Be sure to check Configure IIS7 Module box during installation. Create an Application pool to run the site and API. Create a service account for IIS to run the application as. Info In this walkthrough we use sv_uw_leaf_service but use whatever naming convention is appropriate for your environment Add Write permissions for the service account to your logging directory (where the SERILOG_DIR environment variable is pointing to; this example uses F:\\leaf ) Warning This step is critical, as if IIS is unable to write log activity, you'll also be unable to understand errors or other issues the API encounters ! In the new Application Pool's Advanced Settings , set Identity to the service account created in (6) Load User Profile to True Create the website to host the Leaf browser application. Create an application behind the site to host the API. Do NOT name the API application 'api' , as this will cause the rewrite rule to apply recursively until the request fails. At UW we name the backing application 'leafapi' In the Configuration Editor , under Section : system.webServer/aspNetCore set arguments -> .\\API.dll processPath -> dotnet Create a URL rewrite rule on the site with the following template. Be sure the Append query string box is checked. If not, API calls for Concept search will fail Your web.config should now look like this: <system.webServer> ... <rewrite> <rules> <rule name= \"add {applicationName}\" > <match url= \"^(api/.*)\" /> <action type= \"Rewrite\" url= \"{applicationName}/{R:0}\" appendQueryString= \"true\" logRewrittenUrl= \"true\" /> </rule> </rules> </rewrite> </system.webServer> If the WebDAV module is installed in your IIS instance, you need to either uninstall it or disable it for this site. It inteferes with PUT/DELETE HTTP verbs. <system.webServer> ... <modules runAllManagedModulesForAllRequests= \"true\" > <remove name= \"WebDAVModule\" /> </modules> </system.webServer> If you have not yet created the environment variables for IIS (as described in Step 7 - Set Environment Variables ), do so now. Warning Before moving on, we strongly recommend checking that the Leaf API starts appropriately and can log correctly. If you skip ahead and check the Leaf client and get an error, the error may simply be symptomatic of the API not running. To check the API, start the Application Pool , then: Confirm that you can see an output log file in your SERILOG_DIR directory - If so, the first line should read something like {\"Timestamp\":\"...\", \"Level\":\"Information\",\"MessageTemplate\":\"Starting Leaf's API v{Version}...\" If no log files appear : Make absolutely sure your service account is running in IIS and has permissions to write to the SERILOG_DIR directory. Check the Windows Event Viewer application for possible errors: If log files appear but show an error such as SqlException... Check that the values in your LEAF_APP_DB environment variable connection string are correct, such as username and password. Check that your service account has appropriate privileges to your app database . Next: Step 9 - Configure Authentication with SAML2","title":"8b - Configure Leaf with IIS"},{"location":"installation/installation_steps/9_saml2/","text":"9 - Configure Authentication with SAML2 \u00b6 Leaf delegates support of SAML2 authentication and authorization mechanisms to the various battle-tested and well supported implementations from the open source community (e.g. Shibboleth ). We rely on these implementations for integrating Leaf into your environment. Identity Providers (IdP) \u00b6 Conceptually, Leaf does not depend concretely on any specific method of authentication. Instead, it only requires the following structured data be written to the request headers: A scoped identity of the form <identity\\>@<scope\\> A set of entitlements or group memberships in the form of a character delimited list Two well known IdP implementations that we've interacted with are: Active Directory Federation Services (ADFS) Shibboleth Examples \u00b6 UW Shibboleth IdP UW's Shibboleth IdP sends: An eppn attribute with a value of johndoe@washington.edu A gws_groups attribute with a value of urn:mace:washington.edu:groups:uw_leaf_admins; urn:mace:washington.edu:groups:uw_leaf_users , etc. Thus the Leaf appsettings.json configuration is: \"Authentication\" : { \"Mechanism\" : \"SAML2\" , ... \"SAML2\" : { \"Headers\" : { \"ScopedIdentity\" : \"eppn\" } } }, \"Authorization\" : { \"Mechanism\" : \"SAML2\" , \"SAML2\" : { \"HeadersMapping\" : { \"Entitlements\" : { \"Name\" : \"gws_groups\" , \"Delimiter\" : \";\" } }, \"RolesMapping\" : { \"User\" : \"urn:mace:washington.edu:groups:uw_leaf_users\" , \"Super\" : \"NOT_USED\" , \"Identified\" : \"urn:mace:washington.edu:groups:uw_leaf_identified\" , \"Admin\" : \"urn:mace:washington.edu:groups:uw_leaf_admins\" } }, ... UW Medicine ADFS IdP UW Medicine's ADFS IdP sends: A uwUPN attribute with a value of johndoe@amc.uwmedicine.org A uwGroups attribute with a value of am_Leaf_Users; am_Leaf_Identified; am_Leaf_Admin Thus the Leaf appsettings.json configuration is: \"Authentication\" : { \"Mechanism\" : \"SAML2\" , ... \"SAML2\" : { \"Headers\" : { \"ScopedIdentity\" : \"uwUPN\" } } }, \"Authorization\" : { \"Mechanism\" : \"SAML2\" , \"SAML2\" : { \"HeadersMapping\" : { \"Entitlements\" : { \"Name\" : \"uwGroups\" , \"Delimiter\" : \";\" } }, \"RolesMapping\" : { \"User\" : \"am_Leaf_Users\" , \"Super\" : \"NOT_USED\" , \"Identified\" : \"am_Leaf_Identified\" , \"Admin\" : \"am_Leaf_Admin\" } }, ... Service Providers (SP) \u00b6 There are multiple implementations of the Service Provider role in the SAML2 protocol, but as we have only ever used Shibboleth, we will refer to that specifically in the following documentation. Shibboleth SP Installation Media Shibboleth SP Installation Documentation Route Protection Setup \u00b6 There are two routes that must be protected by the SAML2 Service Provider (SP). All other routes are protected by requiring a JWT that can only be generated from a SAML2 SP protected endpoint. / --> React client app /api/user --> Token generation endpoint In a non-federated deployment, you can also elect to protect the entire API surface Warning If you are running Leaf's React application at the root of an IIS Server (e.g. leaf.uwmedicine.org instead of leaf.uwmedicine.org/leaf ), make sure to leave leaf.uwmedicine.org/leafApi unprotected also . Why? Protecting the root of the React client app (e.g., leaf.uwmedicine.org ) in Shibboleth will automatically make all sub-paths protected. If exceptions are only made for requests with the /api path (except for /api/config and /api/user/ , noted above), once the IIS URL Rewrite rule changes the request to the /leafApi path, Shibboleth will intercept this request and not allow the React client app to call the API, thus will breaking the application Web Servers \u00b6 Service Provider considerations for each component: Apache There is no extra Shibboleth Service Provider configuration required to interoperate with Apache. IIS IIS requires a specific ISAPI element within the InProcess element. Additionally, .NET Core does not support server variables and so the IdP provided user attributes must be written to the request headers. A prototypical IIS InProcess element looks like: <InProcess> ...additional configuration <ISAPI normalizeRequest= \"true\" safeHeaderNames= \"true\" useHeaders= \"true\" > <Site id= \"1\" name= \"<server>.<subdomain>.<your_institution>.<tld>\" /> </ISAPI> </InProcess> ADFS Shibboleth Service Provider 3 can be configured to work with ADFS. However, it requires a couple extensions bundled with the installation. The extensions are loaded into the OutOfProcess and InProcess elements via the Extensions element. A prototypical ADFS configuration looks like: <OutOfProcess tranLogFormat= \"%u|%s|%IDP|%i|%ac|%t|%attr|%n|%b|%E|%S|%SS|%L|%UA|%a\" > <Extensions> <Library path= \"adfs.so\" fatal= \"true\" /> </Extensions> </OutOfProcess> ... <InProcess> <Extensions> <Library path= \"adfs-lite.so\" fatal= \"true\" /> </Extensions> ...ISAPI configuration if running in IIS </InProcess> Shibboleth There is no extra Shibboleth Service Provider configuration required to interoperate with a Shibboleth IdP. Example Configurations \u00b6 IIS/ADFS Configure Shibboleth SP3 with IIS and ADFS 3.0: shibboleth2.xml <SPConfig xmlns= \"urn:mace:shibboleth:3.0:native:sp:config\" xmlns:conf= \"urn:mace:shibboleth:3.0:native:sp:config\" clockSkew= \"180\" > <OutOfProcess tranLogFormat= \"%u|%s|%IDP|%i|%ac|%t|%attr|%n|%b|%E|%S|%SS|%L|%UA|%a\" > <Extensions> <Library path= \"adfs.so\" fatal= \"true\" /> </Extensions> </OutOfProcess> <InProcess> <Extensions> <Library path= \"adfs-lite.so\" fatal= \"true\" /> </Extensions> <ISAPI normalizeRequest= \"true\" safeHeaderNames= \"true\" useHeaders= \"true\" > <Site id= \"1\" name= \"<server>.<subdomain>.<institution>.<tld>\" /> </ISAPI> </InProcess> <RequestMapper type= \"Native\" > <RequestMap> <Host name= \"<server>.<subdomain>.<institution>.<tld>\" requireSession= \"true\" authType= \"shibboleth\" > </Host> </RequestMap> </RequestMapper> <ApplicationDefaults entityID= \"https://<server>.<subdomain>.<institution>.<tld>/shibboleth\" REMOTE_USER= \"nameID\" cipherSuites= \"DEFAULT:!EXP:!LOW:!aNULL:!eNULL:!DES:!IDEA:!SEED:!RC4:!3DES:!kRSA:!SSLv2:!SSLv3:!TLSv1:!TLSv1.1\" > <Sessions lifetime= \"28800\" timeout= \"3600\" relayState= \"ss:mem\" checkAddress= \"false\" handlerSSL= \"true\" cookieProps= \"https\" > <SSO id= \"<idp_abbreviation>\" isDefault= \"true\" entityID= \"<idp_entityID>\" > SAML2 </SSO> <!-- local-only logout. --> <Logout> Local </Logout> <!-- Administrative logout. --> <LogoutInitiator type= \"Admin\" Location= \"/Logout/Admin\" acl= \"127.0.0.1 ::1\" /> <!-- Extension service that generates \"approximate\" metadata based on SP configuration. --> <Handler type= \"MetadataGenerator\" Location= \"/Metadata\" signing= \"false\" /> <!-- Status reporting service. --> <Handler type= \"Status\" Location= \"/Status\" acl= \"127.0.0.1 ::1\" /> <!-- Session diagnostic service. --> <Handler type= \"Session\" Location= \"/Session\" showAttributeValues= \"false\" /> <!-- JSON feed of discovery information. --> <Handler type= \"DiscoveryFeed\" Location= \"/DiscoFeed\" /> </Sessions> <Errors supportContact= \"root@localhost\" helpLocation= \"/about.html\" styleSheet= \"/shibboleth-sp/main.css\" /> <!-- Example of remotely supplied batch of signed metadata. --> <MetadataProvider type= \"XML\" validate= \"true\" url= \"<idp_metadata_url>\" backingFilePath= \"federation-metadata.xml\" maxRefreshDelay= \"7200\" > </MetadataProvider> <!-- Map to extract attributes from SAML assertions. --> <AttributeExtractor type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"attribute-map.xml\" /> <!-- Default filtering policy for recognized attributes, lets other data pass. --> <AttributeFilter type= \"XML\" validate= \"true\" path= \"attribute-policy.xml\" /> <!-- Simple file-based resolvers for separate signing/encryption keys. --> <CredentialResolver type= \"File\" use= \"signing\" key= \"sp-signing-key.pem\" certificate= \"sp-signing-cert.pem\" /> <CredentialResolver type= \"File\" use= \"encryption\" key= \"sp-encrypt-key.pem\" certificate= \"sp-encrypt-cert.pem\" /> </ApplicationDefaults> <!-- Policies that determine how to process and authenticate runtime messages. --> <SecurityPolicyProvider type= \"XML\" validate= \"true\" path= \"security-policy.xml\" /> <!-- Low-level configuration about protocols and bindings available for use. --> <ProtocolProvider type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"protocols.xml\" /> </SPConfig> attribute-map.xml <Attributes xmlns= \"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <Attribute name= \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\" id= \"nameID\" /> <Attribute name= \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" id= \"groups\" /> </Attributes> The above example could be highly variable depending on your ADFS IdP set up, and how your relying party's claims are configured. Apache/Shibboleth Configure Shibboleth SP3 with Apache and Shibboleth IdP: This example uses InCommon Federation metadata, but would only allow authentication by the specified IdP shibboleth2.xml <SPConfig xmlns= \"urn:mace:shibboleth:3.0:native:sp:config\" xmlns:conf= \"urn:mace:shibboleth:3.0:native:sp:config\" clockSkew= \"180\" > <ApplicationDefaults entityID= \"https://<server>.<subdomain>.<institution>.<tld>/shibboleth\" REMOTE_USER= \"eppn persistent-id targeted-id\" > <Sessions lifetime= \"28800\" timeout= \"3600\" checkAddress= \"false\" relayState= \"ss:mem\" handlerSSL= \"true\" cookieProps= \"https\" > <SSO id= \"<abbrev>\" isDefault= \"true\" entityID= \"<IdP supplied entityID>\" > SAML2 SAML1 </SSO> <!-- local-only logout. --> <Logout> Local </Logout> <!-- Extension service that generates \"approximate\" metadata based on SP configuration. --> <Handler type= \"MetadataGenerator\" Location= \"/Metadata\" signing= \"false\" /> <!-- Status reporting service. --> <Handler type= \"Status\" Location= \"/Status\" acl= \"127.0.0.1 ::1\" /> <!-- Session diagnostic service. --> <Handler type= \"Session\" Location= \"/Session\" showAttributeValues= \"true\" /> <!-- JSON feed of discovery information. --> <Handler type= \"DiscoveryFeed\" Location= \"/DiscoFeed\" dir= \"/data/shibds/discofeed\" /> </Sessions> <Errors supportContact= \"root@localhost\" helpLocation= \"/about.html\" styleSheet= \"/shibboleth-sp/main.css\" /> <MetadataProvider type= \"XML\" url= \"http://md.incommon.org/InCommon/InCommon-metadata-idp-only.xml\" backingFilePath= \"InCommon-metadata-idp-only.xml\" maxRefreshDelay= \"3600\" > <MetadataFilter type= \"RequireValidUntil\" maxValidityInterval= \"1209600\" /> <MetadataFilter type= \"Signature\" certificate= \"/etc/pki/tls/certs/inc-md-cert.pem\" /> <MetadataFilter type= \"EntityRoleWhiteList\" > <RetainedRole> md:IDPSSODescriptor </RetainedRole> <RetainedRole> md:AttributeAuthorityDescriptor </RetainedRole> </MetadataFilter> </MetadataProvider> <!-- Map to extract attributes from SAML assertions. --> <AttributeExtractor type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"attribute-map.xml\" /> <!-- Use a SAML query if no attributes are supplied during SSO. --> <AttributeResolver type= \"Query\" subjectMatch= \"true\" /> <!-- Default filtering policy for recognized attributes, lets other data pass. --> <AttributeFilter type= \"XML\" validate= \"true\" path= \"attribute-policy.xml\" /> <!-- Simple file-based resolver for using a single keypair. --> <CredentialResolver type= \"File\" key= \"/etc/pki/tls/private/leaf.rit.uw.edu-shibd-self.key\" certificate= \"/etc/pki/tls/certs/leaf.rit.uw.edu-shibd-self.cert\" /> </ApplicationDefaults> <!-- Policies that determine how to process and authenticate runtime messages. --> <SecurityPolicyProvider type= \"XML\" validate= \"true\" path= \"security-policy.xml\" /> <!-- Low-level configuration about protocols and bindings available for use. --> <ProtocolProvider type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"protocols.xml\" /> </SPConfig> If you've made it this far, awesome! You've successfully configured Leaf to run in your environment. We promise the next steps are more fun. Next we'll configure Leaf to run queries on your clinical database. Next: Leaf Administration","title":"9 - Configure Authentication with SAML2"},{"location":"installation/installation_steps/9_saml2/#9-configure-authentication-with-saml2","text":"Leaf delegates support of SAML2 authentication and authorization mechanisms to the various battle-tested and well supported implementations from the open source community (e.g. Shibboleth ). We rely on these implementations for integrating Leaf into your environment.","title":"9 - Configure Authentication with SAML2"},{"location":"installation/installation_steps/9_saml2/#identity-providers-idp","text":"Conceptually, Leaf does not depend concretely on any specific method of authentication. Instead, it only requires the following structured data be written to the request headers: A scoped identity of the form <identity\\>@<scope\\> A set of entitlements or group memberships in the form of a character delimited list Two well known IdP implementations that we've interacted with are: Active Directory Federation Services (ADFS) Shibboleth","title":"Identity Providers (IdP)"},{"location":"installation/installation_steps/9_saml2/#examples","text":"UW Shibboleth IdP UW's Shibboleth IdP sends: An eppn attribute with a value of johndoe@washington.edu A gws_groups attribute with a value of urn:mace:washington.edu:groups:uw_leaf_admins; urn:mace:washington.edu:groups:uw_leaf_users , etc. Thus the Leaf appsettings.json configuration is: \"Authentication\" : { \"Mechanism\" : \"SAML2\" , ... \"SAML2\" : { \"Headers\" : { \"ScopedIdentity\" : \"eppn\" } } }, \"Authorization\" : { \"Mechanism\" : \"SAML2\" , \"SAML2\" : { \"HeadersMapping\" : { \"Entitlements\" : { \"Name\" : \"gws_groups\" , \"Delimiter\" : \";\" } }, \"RolesMapping\" : { \"User\" : \"urn:mace:washington.edu:groups:uw_leaf_users\" , \"Super\" : \"NOT_USED\" , \"Identified\" : \"urn:mace:washington.edu:groups:uw_leaf_identified\" , \"Admin\" : \"urn:mace:washington.edu:groups:uw_leaf_admins\" } }, ... UW Medicine ADFS IdP UW Medicine's ADFS IdP sends: A uwUPN attribute with a value of johndoe@amc.uwmedicine.org A uwGroups attribute with a value of am_Leaf_Users; am_Leaf_Identified; am_Leaf_Admin Thus the Leaf appsettings.json configuration is: \"Authentication\" : { \"Mechanism\" : \"SAML2\" , ... \"SAML2\" : { \"Headers\" : { \"ScopedIdentity\" : \"uwUPN\" } } }, \"Authorization\" : { \"Mechanism\" : \"SAML2\" , \"SAML2\" : { \"HeadersMapping\" : { \"Entitlements\" : { \"Name\" : \"uwGroups\" , \"Delimiter\" : \";\" } }, \"RolesMapping\" : { \"User\" : \"am_Leaf_Users\" , \"Super\" : \"NOT_USED\" , \"Identified\" : \"am_Leaf_Identified\" , \"Admin\" : \"am_Leaf_Admin\" } }, ...","title":"Examples"},{"location":"installation/installation_steps/9_saml2/#service-providers-sp","text":"There are multiple implementations of the Service Provider role in the SAML2 protocol, but as we have only ever used Shibboleth, we will refer to that specifically in the following documentation. Shibboleth SP Installation Media Shibboleth SP Installation Documentation","title":"Service Providers (SP)"},{"location":"installation/installation_steps/9_saml2/#route-protection-setup","text":"There are two routes that must be protected by the SAML2 Service Provider (SP). All other routes are protected by requiring a JWT that can only be generated from a SAML2 SP protected endpoint. / --> React client app /api/user --> Token generation endpoint In a non-federated deployment, you can also elect to protect the entire API surface Warning If you are running Leaf's React application at the root of an IIS Server (e.g. leaf.uwmedicine.org instead of leaf.uwmedicine.org/leaf ), make sure to leave leaf.uwmedicine.org/leafApi unprotected also . Why? Protecting the root of the React client app (e.g., leaf.uwmedicine.org ) in Shibboleth will automatically make all sub-paths protected. If exceptions are only made for requests with the /api path (except for /api/config and /api/user/ , noted above), once the IIS URL Rewrite rule changes the request to the /leafApi path, Shibboleth will intercept this request and not allow the React client app to call the API, thus will breaking the application","title":"Route Protection Setup"},{"location":"installation/installation_steps/9_saml2/#web-servers","text":"Service Provider considerations for each component: Apache There is no extra Shibboleth Service Provider configuration required to interoperate with Apache. IIS IIS requires a specific ISAPI element within the InProcess element. Additionally, .NET Core does not support server variables and so the IdP provided user attributes must be written to the request headers. A prototypical IIS InProcess element looks like: <InProcess> ...additional configuration <ISAPI normalizeRequest= \"true\" safeHeaderNames= \"true\" useHeaders= \"true\" > <Site id= \"1\" name= \"<server>.<subdomain>.<your_institution>.<tld>\" /> </ISAPI> </InProcess> ADFS Shibboleth Service Provider 3 can be configured to work with ADFS. However, it requires a couple extensions bundled with the installation. The extensions are loaded into the OutOfProcess and InProcess elements via the Extensions element. A prototypical ADFS configuration looks like: <OutOfProcess tranLogFormat= \"%u|%s|%IDP|%i|%ac|%t|%attr|%n|%b|%E|%S|%SS|%L|%UA|%a\" > <Extensions> <Library path= \"adfs.so\" fatal= \"true\" /> </Extensions> </OutOfProcess> ... <InProcess> <Extensions> <Library path= \"adfs-lite.so\" fatal= \"true\" /> </Extensions> ...ISAPI configuration if running in IIS </InProcess> Shibboleth There is no extra Shibboleth Service Provider configuration required to interoperate with a Shibboleth IdP.","title":"Web Servers"},{"location":"installation/installation_steps/9_saml2/#example-configurations","text":"IIS/ADFS Configure Shibboleth SP3 with IIS and ADFS 3.0: shibboleth2.xml <SPConfig xmlns= \"urn:mace:shibboleth:3.0:native:sp:config\" xmlns:conf= \"urn:mace:shibboleth:3.0:native:sp:config\" clockSkew= \"180\" > <OutOfProcess tranLogFormat= \"%u|%s|%IDP|%i|%ac|%t|%attr|%n|%b|%E|%S|%SS|%L|%UA|%a\" > <Extensions> <Library path= \"adfs.so\" fatal= \"true\" /> </Extensions> </OutOfProcess> <InProcess> <Extensions> <Library path= \"adfs-lite.so\" fatal= \"true\" /> </Extensions> <ISAPI normalizeRequest= \"true\" safeHeaderNames= \"true\" useHeaders= \"true\" > <Site id= \"1\" name= \"<server>.<subdomain>.<institution>.<tld>\" /> </ISAPI> </InProcess> <RequestMapper type= \"Native\" > <RequestMap> <Host name= \"<server>.<subdomain>.<institution>.<tld>\" requireSession= \"true\" authType= \"shibboleth\" > </Host> </RequestMap> </RequestMapper> <ApplicationDefaults entityID= \"https://<server>.<subdomain>.<institution>.<tld>/shibboleth\" REMOTE_USER= \"nameID\" cipherSuites= \"DEFAULT:!EXP:!LOW:!aNULL:!eNULL:!DES:!IDEA:!SEED:!RC4:!3DES:!kRSA:!SSLv2:!SSLv3:!TLSv1:!TLSv1.1\" > <Sessions lifetime= \"28800\" timeout= \"3600\" relayState= \"ss:mem\" checkAddress= \"false\" handlerSSL= \"true\" cookieProps= \"https\" > <SSO id= \"<idp_abbreviation>\" isDefault= \"true\" entityID= \"<idp_entityID>\" > SAML2 </SSO> <!-- local-only logout. --> <Logout> Local </Logout> <!-- Administrative logout. --> <LogoutInitiator type= \"Admin\" Location= \"/Logout/Admin\" acl= \"127.0.0.1 ::1\" /> <!-- Extension service that generates \"approximate\" metadata based on SP configuration. --> <Handler type= \"MetadataGenerator\" Location= \"/Metadata\" signing= \"false\" /> <!-- Status reporting service. --> <Handler type= \"Status\" Location= \"/Status\" acl= \"127.0.0.1 ::1\" /> <!-- Session diagnostic service. --> <Handler type= \"Session\" Location= \"/Session\" showAttributeValues= \"false\" /> <!-- JSON feed of discovery information. --> <Handler type= \"DiscoveryFeed\" Location= \"/DiscoFeed\" /> </Sessions> <Errors supportContact= \"root@localhost\" helpLocation= \"/about.html\" styleSheet= \"/shibboleth-sp/main.css\" /> <!-- Example of remotely supplied batch of signed metadata. --> <MetadataProvider type= \"XML\" validate= \"true\" url= \"<idp_metadata_url>\" backingFilePath= \"federation-metadata.xml\" maxRefreshDelay= \"7200\" > </MetadataProvider> <!-- Map to extract attributes from SAML assertions. --> <AttributeExtractor type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"attribute-map.xml\" /> <!-- Default filtering policy for recognized attributes, lets other data pass. --> <AttributeFilter type= \"XML\" validate= \"true\" path= \"attribute-policy.xml\" /> <!-- Simple file-based resolvers for separate signing/encryption keys. --> <CredentialResolver type= \"File\" use= \"signing\" key= \"sp-signing-key.pem\" certificate= \"sp-signing-cert.pem\" /> <CredentialResolver type= \"File\" use= \"encryption\" key= \"sp-encrypt-key.pem\" certificate= \"sp-encrypt-cert.pem\" /> </ApplicationDefaults> <!-- Policies that determine how to process and authenticate runtime messages. --> <SecurityPolicyProvider type= \"XML\" validate= \"true\" path= \"security-policy.xml\" /> <!-- Low-level configuration about protocols and bindings available for use. --> <ProtocolProvider type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"protocols.xml\" /> </SPConfig> attribute-map.xml <Attributes xmlns= \"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" > <Attribute name= \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\" id= \"nameID\" /> <Attribute name= \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" id= \"groups\" /> </Attributes> The above example could be highly variable depending on your ADFS IdP set up, and how your relying party's claims are configured. Apache/Shibboleth Configure Shibboleth SP3 with Apache and Shibboleth IdP: This example uses InCommon Federation metadata, but would only allow authentication by the specified IdP shibboleth2.xml <SPConfig xmlns= \"urn:mace:shibboleth:3.0:native:sp:config\" xmlns:conf= \"urn:mace:shibboleth:3.0:native:sp:config\" clockSkew= \"180\" > <ApplicationDefaults entityID= \"https://<server>.<subdomain>.<institution>.<tld>/shibboleth\" REMOTE_USER= \"eppn persistent-id targeted-id\" > <Sessions lifetime= \"28800\" timeout= \"3600\" checkAddress= \"false\" relayState= \"ss:mem\" handlerSSL= \"true\" cookieProps= \"https\" > <SSO id= \"<abbrev>\" isDefault= \"true\" entityID= \"<IdP supplied entityID>\" > SAML2 SAML1 </SSO> <!-- local-only logout. --> <Logout> Local </Logout> <!-- Extension service that generates \"approximate\" metadata based on SP configuration. --> <Handler type= \"MetadataGenerator\" Location= \"/Metadata\" signing= \"false\" /> <!-- Status reporting service. --> <Handler type= \"Status\" Location= \"/Status\" acl= \"127.0.0.1 ::1\" /> <!-- Session diagnostic service. --> <Handler type= \"Session\" Location= \"/Session\" showAttributeValues= \"true\" /> <!-- JSON feed of discovery information. --> <Handler type= \"DiscoveryFeed\" Location= \"/DiscoFeed\" dir= \"/data/shibds/discofeed\" /> </Sessions> <Errors supportContact= \"root@localhost\" helpLocation= \"/about.html\" styleSheet= \"/shibboleth-sp/main.css\" /> <MetadataProvider type= \"XML\" url= \"http://md.incommon.org/InCommon/InCommon-metadata-idp-only.xml\" backingFilePath= \"InCommon-metadata-idp-only.xml\" maxRefreshDelay= \"3600\" > <MetadataFilter type= \"RequireValidUntil\" maxValidityInterval= \"1209600\" /> <MetadataFilter type= \"Signature\" certificate= \"/etc/pki/tls/certs/inc-md-cert.pem\" /> <MetadataFilter type= \"EntityRoleWhiteList\" > <RetainedRole> md:IDPSSODescriptor </RetainedRole> <RetainedRole> md:AttributeAuthorityDescriptor </RetainedRole> </MetadataFilter> </MetadataProvider> <!-- Map to extract attributes from SAML assertions. --> <AttributeExtractor type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"attribute-map.xml\" /> <!-- Use a SAML query if no attributes are supplied during SSO. --> <AttributeResolver type= \"Query\" subjectMatch= \"true\" /> <!-- Default filtering policy for recognized attributes, lets other data pass. --> <AttributeFilter type= \"XML\" validate= \"true\" path= \"attribute-policy.xml\" /> <!-- Simple file-based resolver for using a single keypair. --> <CredentialResolver type= \"File\" key= \"/etc/pki/tls/private/leaf.rit.uw.edu-shibd-self.key\" certificate= \"/etc/pki/tls/certs/leaf.rit.uw.edu-shibd-self.cert\" /> </ApplicationDefaults> <!-- Policies that determine how to process and authenticate runtime messages. --> <SecurityPolicyProvider type= \"XML\" validate= \"true\" path= \"security-policy.xml\" /> <!-- Low-level configuration about protocols and bindings available for use. --> <ProtocolProvider type= \"XML\" validate= \"true\" reloadChanges= \"false\" path= \"protocols.xml\" /> </SPConfig> If you've made it this far, awesome! You've successfully configured Leaf to run in your environment. We promise the next steps are more fun. Next we'll configure Leaf to run queries on your clinical database. Next: Leaf Administration","title":"Example Configurations"},{"location":"showcase/","text":"Leaf Deployment Showcase \u00b6 Curious who uses Leaf and how they've configured it? Here a few examples: The University of Washington (UW) \u00b6 UW Medicine is a leading healthcare and biomedical research organization located in the Puget Sound area in the Northwest United States. As the home of the Leaf development team in UW Medicine Research IT, UW Medicine has hosted a flagship Leaf instance since 2018. Data Source Number of Patients Number of active users Federated Enterprise Data Warehouse 5 million+ 400+ No The National Alzheimer's Coordinating Center (NACC) \u00b6 The National Alzheimer's Coordinating Center (NACC) was established by the National Institute on Aging/NIH in 1999 to facilitate collaborative research among the 29 NIA-funded Alzheimer's Disease Centers (ADCs) nationwide. NACC developed and maintains a large relational database of standardized clinical and neuropathological research data collected from each ADC, and this database provides a valuable resource for both exploratory and explanatory Alzheimer's disease research. NACC data are freely available to all researchers. Data Source Number of Patients Number of active users Federated Clinical and neuropathological research database 50k+ N/A No","title":"Leaf Deployment Showcase"},{"location":"showcase/#leaf-deployment-showcase","text":"Curious who uses Leaf and how they've configured it? Here a few examples:","title":"Leaf Deployment Showcase"},{"location":"showcase/#the-university-of-washington-uw","text":"UW Medicine is a leading healthcare and biomedical research organization located in the Puget Sound area in the Northwest United States. As the home of the Leaf development team in UW Medicine Research IT, UW Medicine has hosted a flagship Leaf instance since 2018. Data Source Number of Patients Number of active users Federated Enterprise Data Warehouse 5 million+ 400+ No","title":"The University of Washington (UW)"},{"location":"showcase/#the-national-alzheimers-coordinating-center-nacc","text":"The National Alzheimer's Coordinating Center (NACC) was established by the National Institute on Aging/NIH in 1999 to facilitate collaborative research among the 29 NIA-funded Alzheimer's Disease Centers (ADCs) nationwide. NACC developed and maintains a large relational database of standardized clinical and neuropathological research data collected from each ADC, and this database provides a valuable resource for both exploratory and explanatory Alzheimer's disease research. NACC data are freely available to all researchers. Data Source Number of Patients Number of active users Federated Clinical and neuropathological research database 50k+ N/A No","title":"The National Alzheimer's Coordinating Center (NACC)"}]}